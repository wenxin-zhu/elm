{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*!\n  * vue-router v4.0.0-beta.13\n  * (c) 2020 Eduardo San Martin Morote\n  * @license MIT\n  */\nimport { getCurrentInstance, warn as warn$1, inject, onUnmounted, onDeactivated, onActivated, computed, unref, defineComponent, reactive, h, provide, ref, watch, shallowRef, nextTick } from 'vue';\nconst hasSymbol = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';\nconst PolySymbol = name =>\n// vr = vue router\nhasSymbol ? Symbol(process.env.NODE_ENV !== 'production' ? '[vue-router]: ' + name : name) : (process.env.NODE_ENV !== 'production' ? '[vue-router]: ' : '_vr_') + name;\n// rvlm = Router View Location Matched\nconst matchedRouteKey = PolySymbol(process.env.NODE_ENV !== 'production' ? 'router view location matched' : 'rvlm');\n// rvd = Router View Depth\nconst viewDepthKey = PolySymbol(process.env.NODE_ENV !== 'production' ? 'router view depth' : 'rvd');\n// r = router\nconst routerKey = PolySymbol(process.env.NODE_ENV !== 'production' ? 'router' : 'r');\n// rt = route location\nconst routeLocationKey = PolySymbol(process.env.NODE_ENV !== 'production' ? 'route location' : 'rl');\nconst isBrowser = typeof window !== 'undefined';\nfunction isESModule(obj) {\n  return obj.__esModule || hasSymbol && obj[Symbol.toStringTag] === 'Module';\n}\nconst assign = Object.assign;\nfunction applyToParams(fn, params) {\n  const newParams = {};\n  for (const key in params) {\n    const value = params[key];\n    newParams[key] = Array.isArray(value) ? value.map(fn) : fn(value);\n  }\n  return newParams;\n}\nlet noop = () => {};\nfunction warn(msg) {\n  // avoid using ...args as it breaks in older Edge builds\n  const args = Array.from(arguments).slice(1);\n  console.warn.apply(console, ['[Vue Router warn]: ' + msg].concat(args));\n}\nconst TRAILING_SLASH_RE = /\\/$/;\nconst removeTrailingSlash = path => path.replace(TRAILING_SLASH_RE, '');\n/**\r\n * Transforms an URI into a normalized history location\r\n *\r\n * @param parseQuery\r\n * @param location - URI to normalize\r\n * @param currentLocation - current absolute location. Allows resolving relative\r\n * paths. Must start with `/`. Defaults to `/`\r\n * @returns a normalized history location\r\n */\nfunction parseURL(parseQuery, location, currentLocation = '/') {\n  let path,\n    query = {},\n    searchString = '',\n    hash = '';\n  // Could use URL and URLSearchParams but IE 11 doesn't support it\n  const searchPos = location.indexOf('?');\n  const hashPos = location.indexOf('#', searchPos > -1 ? searchPos : 0);\n  if (searchPos > -1) {\n    path = location.slice(0, searchPos);\n    searchString = location.slice(searchPos + 1, hashPos > -1 ? hashPos : location.length);\n    query = parseQuery(searchString);\n  }\n  if (hashPos > -1) {\n    path = path || location.slice(0, hashPos);\n    // keep the # character\n    hash = location.slice(hashPos, location.length);\n  }\n  // no search and no query\n  path = resolveRelativePath(path != null ? path : location, currentLocation);\n  // empty path means a relative query or hash `?foo=f`, `#thing`\n  return {\n    fullPath: path + (searchString && '?') + searchString + hash,\n    path,\n    query,\n    hash\n  };\n}\n/**\r\n * Stringifies a URL object\r\n *\r\n * @param stringifyQuery\r\n * @param location\r\n */\nfunction stringifyURL(stringifyQuery, location) {\n  let query = location.query ? stringifyQuery(location.query) : '';\n  return location.path + (query && '?') + query + (location.hash || '');\n}\n/**\r\n * Strips off the base from the beginning of a location.pathname in a non\r\n * case-sensitive way.\r\n *\r\n * @param pathname - location.pathname\r\n * @param base - base to strip off\r\n */\nfunction stripBase(pathname, base) {\n  // no base or base is not found at the beginning\n  if (!base || pathname.toLowerCase().indexOf(base.toLowerCase())) return pathname;\n  return pathname.slice(base.length) || '/';\n}\n/**\r\n * Checks if two RouteLocation are equal. This means that both locations are\r\n * pointing towards the same {@link RouteRecord} and that all `params`, `query`\r\n * parameters and `hash` are the same\r\n *\r\n * @param a - first {@link RouteLocation}\r\n * @param b - second {@link RouteLocation}\r\n */\nfunction isSameRouteLocation(stringifyQuery, a, b) {\n  let aLastIndex = a.matched.length - 1;\n  let bLastIndex = b.matched.length - 1;\n  return aLastIndex > -1 && aLastIndex === bLastIndex && isSameRouteRecord(a.matched[aLastIndex], b.matched[bLastIndex]) && isSameRouteLocationParams(a.params, b.params) && stringifyQuery(a.query) === stringifyQuery(b.query) && a.hash === b.hash;\n}\n/**\r\n * Check if two `RouteRecords` are equal. Takes into account aliases: they are\r\n * considered equal to the `RouteRecord` they are aliasing.\r\n *\r\n * @param a - first {@link RouteRecord}\r\n * @param b - second {@link RouteRecord}\r\n */\nfunction isSameRouteRecord(a, b) {\n  // since the original record has an undefined value for aliasOf\n  // but all aliases point to the original record, this will always compare\n  // the original record\n  return (a.aliasOf || a) === (b.aliasOf || b);\n}\nfunction isSameRouteLocationParams(a, b) {\n  if (Object.keys(a).length !== Object.keys(b).length) return false;\n  for (let key in a) {\n    if (!isSameRouteLocationParamsValue(a[key], b[key])) return false;\n  }\n  return true;\n}\nfunction isSameRouteLocationParamsValue(a, b) {\n  return Array.isArray(a) ? isEquivalentArray(a, b) : Array.isArray(b) ? isEquivalentArray(b, a) : a === b;\n}\n/**\r\n * Check if two arrays are the same or if an array with one single entry is the\r\n * same as another primitive value. Used to check query and parameters\r\n *\r\n * @param a - array of values\r\n * @param b - array of values or a single value\r\n */\nfunction isEquivalentArray(a, b) {\n  return Array.isArray(b) ? a.length === b.length && a.every((value, i) => value === b[i]) : a.length === 1 && a[0] === b;\n}\n/**\r\n * Resolves a relative path that starts with `.`.\r\n *\r\n * @param to - path location we are resolving\r\n * @param from - currentLocation.path, should start with `/`\r\n */\nfunction resolveRelativePath(to, from) {\n  if (to.startsWith('/')) return to;\n  if (process.env.NODE_ENV !== 'production' && !from.startsWith('/')) {\n    warn(`Cannot resolve a relative location without an absolute path. Trying to resolve \"${to}\" from \"${from}\". It should look like \"/${from}\".`);\n    return to;\n  }\n  if (!to) return from;\n  const fromSegments = from.split('/');\n  const toSegments = to.split('/');\n  let position = fromSegments.length - 1;\n  let toPosition;\n  let segment;\n  for (toPosition = 0; toPosition < toSegments.length; toPosition++) {\n    segment = toSegments[toPosition];\n    // can't go below zero\n    if (position === 1 || segment === '.') continue;\n    if (segment === '..') position--;\n    // found something that is not relative path\n    else break;\n  }\n  return fromSegments.slice(0, position).join('/') + '/' + toSegments.slice(toPosition - (toPosition === toSegments.length ? 1 : 0)).join('/');\n}\nvar NavigationType;\n(function (NavigationType) {\n  NavigationType[\"pop\"] = \"pop\";\n  NavigationType[\"push\"] = \"push\";\n})(NavigationType || (NavigationType = {}));\nvar NavigationDirection;\n(function (NavigationDirection) {\n  NavigationDirection[\"back\"] = \"back\";\n  NavigationDirection[\"forward\"] = \"forward\";\n  NavigationDirection[\"unknown\"] = \"\";\n})(NavigationDirection || (NavigationDirection = {}));\n/**\r\n * Starting location for Histories\r\n */\nconst START = '';\n// Generic utils\n/**\r\n * Normalizes a base by removing any trailing slash and reading the base tag if\r\n * present.\r\n *\r\n * @param base - base to normalize\r\n */\nfunction normalizeBase(base) {\n  if (!base) {\n    if (isBrowser) {\n      // respect <base> tag\n      const baseEl = document.querySelector('base');\n      base = baseEl && baseEl.getAttribute('href') || '/';\n      // strip full URL origin\n      base = base.replace(/^\\w+:\\/\\/[^\\/]+/, '');\n    } else {\n      base = '/';\n    }\n  }\n  // ensure leading slash when it was removed by the regex above avoid leading\n  // slash with hash because the file could be read from the disk like file://\n  // and the leading slash would cause problems\n  if (base[0] !== '/' && base[0] !== '#') base = '/' + base;\n  // remove the trailing slash so all other method can just do `base + fullPath`\n  // to build an href\n  return removeTrailingSlash(base);\n}\n// remove any character before the hash\nconst BEFORE_HASH_RE = /^[^#]+#/;\nfunction createHref(base, location) {\n  return base.replace(BEFORE_HASH_RE, '#') + location;\n}\nfunction getElementPosition(el, offset) {\n  const docRect = document.documentElement.getBoundingClientRect();\n  const elRect = el.getBoundingClientRect();\n  return {\n    behavior: offset.behavior,\n    left: elRect.left - docRect.left - (offset.left || 0),\n    top: elRect.top - docRect.top - (offset.top || 0)\n  };\n}\nconst computeScrollPosition = () => ({\n  left: window.pageXOffset,\n  top: window.pageYOffset\n});\nfunction scrollToPosition(position) {\n  let scrollToOptions;\n  if ('el' in position) {\n    let positionEl = position.el;\n    const isIdSelector = typeof positionEl === 'string' && positionEl.startsWith('#');\n    /**\r\n     * `id`s can accept pretty much any characters, including CSS combinators\r\n     * like `>` or `~`. It's still possible to retrieve elements using\r\n     * `document.getElementById('~')` but it needs to be escaped when using\r\n     * `document.querySelector('#\\\\~')` for it to be valid. The only\r\n     * requirements for `id`s are them to be unique on the page and to not be\r\n     * empty (`id=\"\"`). Because of that, when passing an id selector, it should\r\n     * be properly escaped for it to work with `querySelector`. We could check\r\n     * for the id selector to be simple (no CSS combinators `+ >~`) but that\r\n     * would make things inconsistent since they are valid characters for an\r\n     * `id` but would need to be escaped when using `querySelector`, breaking\r\n     * their usage and ending up in no selector returned. Selectors need to be\r\n     * escaped:\r\n     *\r\n     * - `#1-thing` becomes `#\\31 -thing`\r\n     * - `#with~symbols` becomes `#with\\\\~symbols`\r\n     *\r\n     * - More information about  the topic can be found at\r\n     *   https://mathiasbynens.be/notes/html5-id-class.\r\n     * - Practical example: https://mathiasbynens.be/demo/html5-id\r\n     */\n    if (process.env.NODE_ENV !== 'production' && typeof position.el === 'string') {\n      if (!isIdSelector || !document.getElementById(position.el.slice(1))) {\n        try {\n          let foundEl = document.querySelector(position.el);\n          if (isIdSelector && foundEl) {\n            warn(`The selector \"${position.el}\" should be passed as \"el: document.querySelector('${position.el}')\" because it starts with \"#\".`);\n            // return to avoid other warnings\n            return;\n          }\n        } catch (err) {\n          warn(`The selector \"${position.el}\" is invalid. If you are using an id selector, make sure to escape it. You can find more information about escaping characters in selectors at https://mathiasbynens.be/notes/css-escapes or use CSS.escape (https://developer.mozilla.org/en-US/docs/Web/API/CSS/escape).`);\n          // return to avoid other warnings\n          return;\n        }\n      }\n    }\n    const el = typeof positionEl === 'string' ? isIdSelector ? document.getElementById(positionEl.slice(1)) : document.querySelector(positionEl) : positionEl;\n    if (!el) {\n      process.env.NODE_ENV !== 'production' && warn(`Couldn't find element using selector \"${position.el}\" returned by scrollBehavior.`);\n      return;\n    }\n    scrollToOptions = getElementPosition(el, position);\n  } else {\n    scrollToOptions = position;\n  }\n  if ('scrollBehavior' in document.documentElement.style) window.scrollTo(scrollToOptions);else {\n    window.scrollTo(scrollToOptions.left != null ? scrollToOptions.left : window.pageXOffset, scrollToOptions.top != null ? scrollToOptions.top : window.pageYOffset);\n  }\n}\nfunction getScrollKey(path, delta) {\n  const position = history.state ? history.state.position - delta : -1;\n  return position + path;\n}\nconst scrollPositions = new Map();\nfunction saveScrollPosition(key, scrollPosition) {\n  scrollPositions.set(key, scrollPosition);\n}\nfunction getSavedScrollPosition(key) {\n  const scroll = scrollPositions.get(key);\n  // consume it so it's not used again\n  scrollPositions.delete(key);\n  return scroll;\n}\n// TODO: RFC about how to save scroll position\n/**\r\n * ScrollBehavior instance used by the router to compute and restore the scroll\r\n * position when navigating.\r\n */\n// export interface ScrollHandler<ScrollPositionEntry extends HistoryStateValue, ScrollPosition extends ScrollPositionEntry> {\n//   // returns a scroll position that can be saved in history\n//   compute(): ScrollPositionEntry\n//   // can take an extended ScrollPositionEntry\n//   scroll(position: ScrollPosition): void\n// }\n// export const scrollHandler: ScrollHandler<ScrollPosition> = {\n//   compute: computeScroll,\n//   scroll: scrollToPosition,\n// }\n\nlet createBaseLocation = () => location.protocol + '//' + location.host;\n/**\r\n * Creates a normalized history location from a window.location object\r\n * @param location -\r\n */\nfunction createCurrentLocation(base, location) {\n  const {\n    pathname,\n    search,\n    hash\n  } = location;\n  // allows hash based url\n  const hashPos = base.indexOf('#');\n  if (hashPos > -1) {\n    // prepend the starting slash to hash so the url starts with /#\n    let pathFromHash = hash.slice(1);\n    if (pathFromHash[0] !== '/') pathFromHash = '/' + pathFromHash;\n    return stripBase(pathFromHash, '');\n  }\n  const path = stripBase(pathname, base);\n  return path + search + hash;\n}\nfunction useHistoryListeners(base, historyState, currentLocation, replace) {\n  let listeners = [];\n  let teardowns = [];\n  // TODO: should it be a stack? a Dict. Check if the popstate listener\n  // can trigger twice\n  let pauseState = null;\n  const popStateHandler = ({\n    state\n  }) => {\n    const to = createCurrentLocation(base, location);\n    const from = currentLocation.value;\n    const fromState = historyState.value;\n    let delta = 0;\n    if (state) {\n      currentLocation.value = to;\n      historyState.value = state;\n      // ignore the popstate and reset the pauseState\n      if (pauseState && pauseState === from) {\n        pauseState = null;\n        return;\n      }\n      delta = fromState ? state.position - fromState.position : 0;\n    } else {\n      replace(to);\n    }\n    // console.log({ deltaFromCurrent })\n    // Here we could also revert the navigation by calling history.go(-delta)\n    // this listener will have to be adapted to not trigger again and to wait for the url\n    // to be updated before triggering the listeners. Some kind of validation function would also\n    // need to be passed to the listeners so the navigation can be accepted\n    // call all listeners\n    listeners.forEach(listener => {\n      listener(currentLocation.value, from, {\n        delta,\n        type: NavigationType.pop,\n        direction: delta ? delta > 0 ? NavigationDirection.forward : NavigationDirection.back : NavigationDirection.unknown\n      });\n    });\n  };\n  function pauseListeners() {\n    pauseState = currentLocation.value;\n  }\n  function listen(callback) {\n    // setup the listener and prepare teardown callbacks\n    listeners.push(callback);\n    const teardown = () => {\n      const index = listeners.indexOf(callback);\n      if (index > -1) listeners.splice(index, 1);\n    };\n    teardowns.push(teardown);\n    return teardown;\n  }\n  function beforeUnloadListener() {\n    const {\n      history\n    } = window;\n    if (!history.state) return;\n    history.replaceState(assign({}, history.state, {\n      scroll: computeScrollPosition()\n    }), '');\n  }\n  function destroy() {\n    for (const teardown of teardowns) teardown();\n    teardowns = [];\n    window.removeEventListener('popstate', popStateHandler);\n    window.removeEventListener('beforeunload', beforeUnloadListener);\n  }\n  // setup the listeners and prepare teardown callbacks\n  window.addEventListener('popstate', popStateHandler);\n  window.addEventListener('beforeunload', beforeUnloadListener);\n  return {\n    pauseListeners,\n    listen,\n    destroy\n  };\n}\n/**\r\n * Creates a state object\r\n */\nfunction buildState(back, current, forward, replaced = false, computeScroll = false) {\n  return {\n    back,\n    current,\n    forward,\n    replaced,\n    position: window.history.length,\n    scroll: computeScroll ? computeScrollPosition() : null\n  };\n}\nfunction useHistoryStateNavigation(base) {\n  const {\n    history,\n    location\n  } = window;\n  // private variables\n  let currentLocation = {\n    value: createCurrentLocation(base, location)\n  };\n  let historyState = {\n    value: history.state\n  };\n  // build current history entry as this is a fresh navigation\n  if (!historyState.value) {\n    changeLocation(currentLocation.value, {\n      back: null,\n      current: currentLocation.value,\n      forward: null,\n      // the length is off by one, we need to decrease it\n      position: history.length - 1,\n      replaced: true,\n      // don't add a scroll as the user may have an anchor and we want\n      // scrollBehavior to be triggered without a saved position\n      scroll: null\n    }, true);\n  }\n  function changeLocation(to, state, replace) {\n    // when the base has a `#`, only use that for the URL\n    const hashIndex = base.indexOf('#');\n    const url = hashIndex > -1 ? base.slice(hashIndex) + to : createBaseLocation() + base + to;\n    try {\n      // BROWSER QUIRK\n      // NOTE: Safari throws a SecurityError when calling this function 100 times in 30 seconds\n      history[replace ? 'replaceState' : 'pushState'](state, '', url);\n      historyState.value = state;\n    } catch (err) {\n      if (process.env.NODE_ENV !== 'production') {\n        warn('Error with push/replace State', err);\n      } else {\n        console.error(err);\n      }\n      // Force the navigation, this also resets the call count\n      location[replace ? 'replace' : 'assign'](url);\n    }\n  }\n  function replace(to, data) {\n    const state = assign({}, history.state, buildState(historyState.value.back,\n    // keep back and forward entries but override current position\n    to, historyState.value.forward, true), data, {\n      position: historyState.value.position\n    });\n    changeLocation(to, state, true);\n    currentLocation.value = to;\n  }\n  function push(to, data) {\n    // Add to current entry the information of where we are going\n    // as well as saving the current position\n    const currentState = assign({},\n    // use current history state to gracefully handle a wrong call to\n    // history.replaceState\n    // https://github.com/vuejs/vue-router-next/issues/366\n    historyState.value, history.state, {\n      forward: to,\n      scroll: computeScrollPosition()\n    });\n    if (process.env.NODE_ENV !== 'production' && !history.state) {\n      warn(`history.state seems to have been manually replaced without preserving the necessary values. Make sure to preserve existing history state if you are manually calling history.replaceState:\\n\\n` + `history.replaceState(history.state, '', url)\\n\\n` + `You can find more information at https://next.router.vuejs.org/guide/migration/#usage-of-history-state.`);\n    }\n    changeLocation(currentState.current, currentState, true);\n    const state = assign({}, buildState(currentLocation.value, to, null), {\n      position: currentState.position + 1\n    }, data);\n    changeLocation(to, state, false);\n    currentLocation.value = to;\n  }\n  return {\n    location: currentLocation,\n    state: historyState,\n    push,\n    replace\n  };\n}\n/**\r\n * Creates an HTML5 history. Most common history for single page applications.\r\n *\r\n * @param base -\r\n */\nfunction createWebHistory(base) {\n  base = normalizeBase(base);\n  const historyNavigation = useHistoryStateNavigation(base);\n  const historyListeners = useHistoryListeners(base, historyNavigation.state, historyNavigation.location, historyNavigation.replace);\n  function go(delta, triggerListeners = true) {\n    if (!triggerListeners) historyListeners.pauseListeners();\n    history.go(delta);\n  }\n  const routerHistory = assign({\n    // it's overridden right after\n    location: '',\n    base,\n    go,\n    createHref: createHref.bind(null, base)\n  }, historyNavigation, historyListeners);\n  Object.defineProperty(routerHistory, 'location', {\n    get: () => historyNavigation.location.value\n  });\n  Object.defineProperty(routerHistory, 'state', {\n    get: () => historyNavigation.state.value\n  });\n  return routerHistory;\n}\n\n/**\r\n * Creates a in-memory based history. The main purpose of this history is to handle SSR. It starts in a special location that is nowhere.\r\n * It's up to the user to replace that location with the starter location by either calling `router.push` or `router.replace`.\r\n *\r\n * @param base - Base applied to all urls, defaults to '/'\r\n * @returns a history object that can be passed to the router constructor\r\n */\nfunction createMemoryHistory(base = '') {\n  let listeners = [];\n  let queue = [START];\n  let position = 0;\n  function setLocation(location) {\n    position++;\n    if (position === queue.length) {\n      // we are at the end, we can simply append a new entry\n      queue.push(location);\n    } else {\n      // we are in the middle, we remove everything from here in the queue\n      queue.splice(position);\n      queue.push(location);\n    }\n  }\n  function triggerListeners(to, from, {\n    direction,\n    delta\n  }) {\n    const info = {\n      direction,\n      delta,\n      type: NavigationType.pop\n    };\n    for (let callback of listeners) {\n      callback(to, from, info);\n    }\n  }\n  const routerHistory = {\n    // rewritten by Object.defineProperty\n    location: START,\n    state: {},\n    base,\n    createHref: createHref.bind(null, base),\n    replace(to) {\n      // remove current entry and decrement position\n      queue.splice(position--, 1);\n      setLocation(to);\n    },\n    push(to, data) {\n      setLocation(to);\n    },\n    listen(callback) {\n      listeners.push(callback);\n      return () => {\n        const index = listeners.indexOf(callback);\n        if (index > -1) listeners.splice(index, 1);\n      };\n    },\n    destroy() {\n      listeners = [];\n    },\n    go(delta, shouldTrigger = true) {\n      const from = this.location;\n      const direction =\n      // we are considering delta === 0 going forward, but in abstract mode\n      // using 0 for the delta doesn't make sense like it does in html5 where\n      // it reloads the page\n      delta < 0 ? NavigationDirection.back : NavigationDirection.forward;\n      position = Math.max(0, Math.min(position + delta, queue.length - 1));\n      if (shouldTrigger) {\n        triggerListeners(this.location, from, {\n          direction,\n          delta\n        });\n      }\n    }\n  };\n  Object.defineProperty(routerHistory, 'location', {\n    get: () => queue[position]\n  });\n  return routerHistory;\n}\n\n/**\r\n * Creates a hash history. Useful for web applications with no host (e.g.\r\n * `file://`) or when configuring a server to handle any URL.\r\n *\r\n * @param base - optional base to provide. Defaults to `location.pathname` or\r\n * `/` if at root. If there is a `base` tag in the `head`, its value will be\r\n * **ignored**.\r\n *\r\n * @example\r\n * ```js\r\n * // at https://example.com/folder\r\n * createWebHashHistory() // gives a url of `https://example.com/folder#`\r\n * createWebHashHistory('/folder/') // gives a url of `https://example.com/folder/#`\r\n * // if the `#` is provided in the base, it won't be added by `createWebHashHistory`\r\n * createWebHashHistory('/folder/#/app/') // gives a url of `https://example.com/folder/#/app/`\r\n * // you should avoid doing this because it changes the original url and breaks copying urls\r\n * createWebHashHistory('/other-folder/') // gives a url of `https://example.com/other-folder/#`\r\n *\r\n * // at file:///usr/etc/folder/index.html\r\n * // for locations with no `host`, the base is ignored\r\n * createWebHashHistory('/iAmIgnored') // gives a url of `file:///usr/etc/folder/index.html#`\r\n * ```\r\n */\nfunction createWebHashHistory(base) {\n  // Make sure this implementation is fine in terms of encoding, specially for IE11\n  // for `file://`, directly use the pathname and ignore the base\n  // location.pathname contains an initial `/` even at the root: `https://example.com`\n  base = location.host ? base || location.pathname : '';\n  // allow the user to provide a `#` in the middle: `/base/#/app`\n  if (base.indexOf('#') < 0) base += '#';\n  if (process.env.NODE_ENV !== 'production' && !base.endsWith('#/') && !base.endsWith('#')) {\n    warn(`A hash base must end with a \"#\":\\n\"${base}\" should be \"${base.replace(/#.*$/, '#')}\".`);\n  }\n  return createWebHistory(base);\n}\nfunction isRouteLocation(route) {\n  return typeof route === 'string' || route && typeof route === 'object';\n}\nfunction isRouteName(name) {\n  return typeof name === 'string' || typeof name === 'symbol';\n}\n\n/**\r\n * Initial route location where the router is. Can be used in navigation guards\r\n * to differentiate the initial navigation.\r\n *\r\n * @example\r\n * ```js\r\n * import { START_LOCATION } from 'vue-router'\r\n *\r\n * router.beforeEach((to, from) => {\r\n *   if (from === START_LOCATION) {\r\n *     // initial navigation\r\n *   }\r\n * })\r\n * ```\r\n */\nconst START_LOCATION_NORMALIZED = {\n  path: '/',\n  name: undefined,\n  params: {},\n  query: {},\n  hash: '',\n  fullPath: '/',\n  matched: [],\n  meta: {},\n  redirectedFrom: undefined\n};\nconst NavigationFailureSymbol = PolySymbol(process.env.NODE_ENV !== 'production' ? 'navigation failure' : 'nf');\n/**\r\n * Enumeration with all possible types for navigation failures. Can be passed to\r\n * {@link isNavigationFailure} to check for specific failures.\r\n */\nvar NavigationFailureType;\n(function (NavigationFailureType) {\n  /**\r\n   * An aborted navigation is a navigation that failed because a navigation\r\n   * guard returned `false` or called `next(false)`\r\n   */\n  NavigationFailureType[NavigationFailureType[\"aborted\"] = 4] = \"aborted\";\n  /**\r\n   * A cancelled navigation is a navigation that failed because a more recent\r\n   * navigation finished started (not necessarily finished).\r\n   */\n  NavigationFailureType[NavigationFailureType[\"cancelled\"] = 8] = \"cancelled\";\n  /**\r\n   * A duplicated navigation is a navigation that failed because it was\r\n   * initiated while already being at the exact same location.\r\n   */\n  NavigationFailureType[NavigationFailureType[\"duplicated\"] = 16] = \"duplicated\";\n})(NavigationFailureType || (NavigationFailureType = {}));\n// DEV only debug messages\nconst ErrorTypeMessages = {\n  [1 /* MATCHER_NOT_FOUND */]({\n    location,\n    currentLocation\n  }) {\n    return `No match for\\n ${JSON.stringify(location)}${currentLocation ? '\\nwhile being at\\n' + JSON.stringify(currentLocation) : ''}`;\n  },\n  [2 /* NAVIGATION_GUARD_REDIRECT */]({\n    from,\n    to\n  }) {\n    return `Redirected from \"${from.fullPath}\" to \"${stringifyRoute(to)}\" via a navigation guard.`;\n  },\n  [4 /* NAVIGATION_ABORTED */]({\n    from,\n    to\n  }) {\n    return `Navigation aborted from \"${from.fullPath}\" to \"${to.fullPath}\" via a navigation guard.`;\n  },\n  [8 /* NAVIGATION_CANCELLED */]({\n    from,\n    to\n  }) {\n    return `Navigation cancelled from \"${from.fullPath}\" to \"${to.fullPath}\" with a new navigation.`;\n  },\n  [16 /* NAVIGATION_DUPLICATED */]({\n    from,\n    to\n  }) {\n    return `Avoided redundant navigation to current location: \"${from.fullPath}\".`;\n  }\n};\nfunction createRouterError(type, params) {\n  if (process.env.NODE_ENV !== 'production' || !true) {\n    return assign(new Error(ErrorTypeMessages[type](params)), {\n      type,\n      [NavigationFailureSymbol]: true\n    }, params);\n  } else {\n    return assign(new Error(), {\n      type,\n      [NavigationFailureSymbol]: true\n    }, params);\n  }\n}\nfunction isNavigationFailure(error, type) {\n  return error instanceof Error && NavigationFailureSymbol in error && (type == null || !!(error.type & type));\n}\nconst propertiesToLog = ['params', 'query', 'hash'];\nfunction stringifyRoute(to) {\n  if (typeof to === 'string') return to;\n  if ('path' in to) return to.path;\n  const location = {};\n  for (const key of propertiesToLog) {\n    if (key in to) location[key] = to[key];\n  }\n  return JSON.stringify(location, null, 2);\n}\n\n// default pattern for a param: non greedy everything but /\nconst BASE_PARAM_PATTERN = '[^/]+?';\nconst BASE_PATH_PARSER_OPTIONS = {\n  sensitive: false,\n  strict: false,\n  start: true,\n  end: true\n};\n// Special Regex characters that must be escaped in static tokens\nconst REGEX_CHARS_RE = /[.+*?^${}()[\\]/\\\\]/g;\n/**\r\n * Creates a path parser from an array of Segments (a segment is an array of Tokens)\r\n *\r\n * @param segments - array of segments returned by tokenizePath\r\n * @param extraOptions - optional options for the regexp\r\n * @returns a PathParser\r\n */\nfunction tokensToParser(segments, extraOptions) {\n  const options = assign({}, BASE_PATH_PARSER_OPTIONS, extraOptions);\n  // the amount of scores is the same as the length of segments except for the root segment \"/\"\n  let score = [];\n  // the regexp as a string\n  let pattern = options.start ? '^' : '';\n  // extracted keys\n  const keys = [];\n  for (const segment of segments) {\n    // the root segment needs special treatment\n    const segmentScores = segment.length ? [] : [90 /* Root */];\n    // allow trailing slash\n    if (options.strict && !segment.length) pattern += '/';\n    for (let tokenIndex = 0; tokenIndex < segment.length; tokenIndex++) {\n      const token = segment[tokenIndex];\n      // resets the score if we are inside a sub segment /:a-other-:b\n      let subSegmentScore = 40 /* Segment */ + (options.sensitive ? 0.25 /* BonusCaseSensitive */ : 0);\n      if (token.type === 0 /* Static */) {\n        // prepend the slash if we are starting a new segment\n        if (!tokenIndex) pattern += '/';\n        pattern += token.value.replace(REGEX_CHARS_RE, '\\\\$&');\n        subSegmentScore += 40 /* Static */;\n      } else if (token.type === 1 /* Param */) {\n        const {\n          value,\n          repeatable,\n          optional,\n          regexp\n        } = token;\n        keys.push({\n          name: value,\n          repeatable,\n          optional\n        });\n        const re = regexp ? regexp : BASE_PARAM_PATTERN;\n        // the user provided a custom regexp /:id(\\\\d+)\n        if (re !== BASE_PARAM_PATTERN) {\n          subSegmentScore += 10 /* BonusCustomRegExp */;\n          // make sure the regexp is valid before using it\n          try {\n            new RegExp(`(${re})`);\n          } catch (err) {\n            throw new Error(`Invalid custom RegExp for param \"${value}\" (${re}): ` + err.message);\n          }\n        }\n        // when we repeat we must take care of the repeating leading slash\n        let subPattern = repeatable ? `((?:${re})(?:/(?:${re}))*)` : `(${re})`;\n        // prepend the slash if we are starting a new segment\n        if (!tokenIndex) subPattern = optional ? `(?:/${subPattern})` : '/' + subPattern;\n        if (optional) subPattern += '?';\n        pattern += subPattern;\n        subSegmentScore += 20 /* Dynamic */;\n        if (optional) subSegmentScore += -8 /* BonusOptional */;\n        if (repeatable) subSegmentScore += -20 /* BonusRepeatable */;\n        if (re === '.*') subSegmentScore += -50 /* BonusWildcard */;\n      }\n\n      segmentScores.push(subSegmentScore);\n    }\n    // an empty array like /home/ -> [[{home}], []]\n    // if (!segment.length) pattern += '/'\n    score.push(segmentScores);\n  }\n  // only apply the strict bonus to the last score\n  if (options.strict && options.end) {\n    const i = score.length - 1;\n    score[i][score[i].length - 1] += 0.7000000000000001 /* BonusStrict */;\n  }\n  // TODO: dev only warn double trailing slash\n  if (!options.strict) pattern += '/?';\n  if (options.end) pattern += '$';\n  // allow paths like /dynamic to only match dynamic or dynamic/... but not dynamic_something_else\n  else if (options.strict) pattern += '(?:/|$)';\n  const re = new RegExp(pattern, options.sensitive ? '' : 'i');\n  function parse(path) {\n    const match = path.match(re);\n    const params = {};\n    if (!match) return null;\n    for (let i = 1; i < match.length; i++) {\n      const value = match[i] || '';\n      const key = keys[i - 1];\n      params[key.name] = value && key.repeatable ? value.split('/') : value;\n    }\n    return params;\n  }\n  function stringify(params) {\n    let path = '';\n    // for optional parameters to allow to be empty\n    let avoidDuplicatedSlash = false;\n    for (const segment of segments) {\n      if (!avoidDuplicatedSlash || !path.endsWith('/')) path += '/';\n      avoidDuplicatedSlash = false;\n      for (const token of segment) {\n        if (token.type === 0 /* Static */) {\n          path += token.value;\n        } else if (token.type === 1 /* Param */) {\n          const {\n            value,\n            repeatable,\n            optional\n          } = token;\n          const param = value in params ? params[value] : '';\n          if (Array.isArray(param) && !repeatable) throw new Error(`Provided param \"${value}\" is an array but it is not repeatable (* or + modifiers)`);\n          const text = Array.isArray(param) ? param.join('/') : param;\n          if (!text) {\n            if (optional) {\n              // remove the last slash as we could be at the end\n              if (path.endsWith('/')) path = path.slice(0, -1);\n              // do not append a slash on the next iteration\n              else avoidDuplicatedSlash = true;\n            } else throw new Error(`Missing required param \"${value}\"`);\n          }\n          path += text;\n        }\n      }\n    }\n    return path;\n  }\n  return {\n    re,\n    score,\n    keys,\n    parse,\n    stringify\n  };\n}\n/**\r\n * Compares an array of numbers as used in PathParser.score and returns a\r\n * number. This function can be used to `sort` an array\r\n * @param a - first array of numbers\r\n * @param b - second array of numbers\r\n * @returns 0 if both are equal, < 0 if a should be sorted first, > 0 if b\r\n * should be sorted first\r\n */\nfunction compareScoreArray(a, b) {\n  let i = 0;\n  while (i < a.length && i < b.length) {\n    const diff = b[i] - a[i];\n    // only keep going if diff === 0\n    if (diff) return diff;\n    i++;\n  }\n  // if the last subsegment was Static, the shorter segments should be sorted first\n  // otherwise sort the longest segment first\n  if (a.length < b.length) {\n    return a.length === 1 && a[0] === 40 /* Static */ + 40 /* Segment */ ? -1 : 1;\n  } else if (a.length > b.length) {\n    return b.length === 1 && b[0] === 40 /* Static */ + 40 /* Segment */ ? 1 : -1;\n  }\n  return 0;\n}\n/**\r\n * Compare function that can be used with `sort` to sort an array of PathParser\r\n * @param a - first PathParser\r\n * @param b - second PathParser\r\n * @returns 0 if both are equal, < 0 if a should be sorted first, > 0 if b\r\n */\nfunction comparePathParserScore(a, b) {\n  let i = 0;\n  const aScore = a.score;\n  const bScore = b.score;\n  while (i < aScore.length && i < bScore.length) {\n    const comp = compareScoreArray(aScore[i], bScore[i]);\n    // do not return if both are equal\n    if (comp) return comp;\n    i++;\n  }\n  // if a and b share the same score entries but b has more, sort b first\n  return bScore.length - aScore.length;\n  // this is the ternary version\n  // return aScore.length < bScore.length\n  //   ? 1\n  //   : aScore.length > bScore.length\n  //   ? -1\n  //   : 0\n}\n\nconst ROOT_TOKEN = {\n  type: 0 /* Static */,\n  value: ''\n};\nconst VALID_PARAM_RE = /[a-zA-Z0-9_]/;\n// After some profiling, the cache seems to be unnecessary because tokenizePath\n// (the slowest part of adding a route) is very fast\n// const tokenCache = new Map<string, Token[][]>()\nfunction tokenizePath(path) {\n  if (!path) return [[]];\n  if (path === '/') return [[ROOT_TOKEN]];\n  if (!path.startsWith('/')) {\n    throw new Error(process.env.NODE_ENV !== 'production' ? `Route paths should start with a \"/\": \"${path}\" should be \"/${path}\".` : `Invalid path \"${path}\"`);\n  }\n  // if (tokenCache.has(path)) return tokenCache.get(path)!\n  function crash(message) {\n    throw new Error(`ERR (${state})/\"${buffer}\": ${message}`);\n  }\n  let state = 0 /* Static */;\n  let previousState = state;\n  const tokens = [];\n  // the segment will always be valid because we get into the initial state\n  // with the leading /\n  let segment;\n  function finalizeSegment() {\n    if (segment) tokens.push(segment);\n    segment = [];\n  }\n  // index on the path\n  let i = 0;\n  // char at index\n  let char;\n  // buffer of the value read\n  let buffer = '';\n  // custom regexp for a param\n  let customRe = '';\n  function consumeBuffer() {\n    if (!buffer) return;\n    if (state === 0 /* Static */) {\n      segment.push({\n        type: 0 /* Static */,\n        value: buffer\n      });\n    } else if (state === 1 /* Param */ || state === 2 /* ParamRegExp */ || state === 3 /* ParamRegExpEnd */) {\n      if (segment.length > 1 && (char === '*' || char === '+')) crash(`A repeatable param (${buffer}) must be alone in its segment. eg: '/:ids+.`);\n      segment.push({\n        type: 1 /* Param */,\n        value: buffer,\n        regexp: customRe,\n        repeatable: char === '*' || char === '+',\n        optional: char === '*' || char === '?'\n      });\n    } else {\n      crash('Invalid state to consume buffer');\n    }\n    buffer = '';\n  }\n  function addCharToBuffer() {\n    buffer += char;\n  }\n  while (i < path.length) {\n    char = path[i++];\n    if (char === '\\\\' && state !== 2 /* ParamRegExp */) {\n      previousState = state;\n      state = 4 /* EscapeNext */;\n      continue;\n    }\n    switch (state) {\n      case 0 /* Static */:\n        if (char === '/') {\n          if (buffer) {\n            consumeBuffer();\n          }\n          finalizeSegment();\n        } else if (char === ':') {\n          consumeBuffer();\n          state = 1 /* Param */;\n        } else {\n          addCharToBuffer();\n        }\n        break;\n      case 4 /* EscapeNext */:\n        addCharToBuffer();\n        state = previousState;\n        break;\n      case 1 /* Param */:\n        if (char === '(') {\n          state = 2 /* ParamRegExp */;\n          customRe = '';\n        } else if (VALID_PARAM_RE.test(char)) {\n          addCharToBuffer();\n        } else {\n          consumeBuffer();\n          state = 0 /* Static */;\n          // go back one character if we were not modifying\n          if (char !== '*' && char !== '?' && char !== '+') i--;\n        }\n        break;\n      case 2 /* ParamRegExp */:\n        // TODO: is it worth handling nested regexp? like :p(?:prefix_([^/]+)_suffix)\n        // it already works by escaping the closing )\n        // https://paths.esm.dev/?p=AAMeJbiAwQEcDKbAoAAkP60PG2R6QAvgNaA6AFACM2ABuQBB#\n        // is this really something people need since you can also write\n        // /prefix_:p()_suffix\n        if (char === ')') {\n          // handle the escaped )\n          if (customRe[customRe.length - 1] == '\\\\') customRe = customRe.slice(0, -1) + char;else state = 3 /* ParamRegExpEnd */;\n        } else {\n          customRe += char;\n        }\n        break;\n      case 3 /* ParamRegExpEnd */:\n        // same as finalizing a param\n        consumeBuffer();\n        state = 0 /* Static */;\n        // go back one character if we were not modifying\n        if (char !== '*' && char !== '?' && char !== '+') i--;\n        break;\n      default:\n        crash('Unknown state');\n        break;\n    }\n  }\n  if (state === 2 /* ParamRegExp */) crash(`Unfinished custom RegExp for param \"${buffer}\"`);\n  consumeBuffer();\n  finalizeSegment();\n  // tokenCache.set(path, tokens)\n  return tokens;\n}\nfunction createRouteRecordMatcher(record, parent, options) {\n  const parser = tokensToParser(tokenizePath(record.path), options);\n  // warn against params with the same name\n  if (process.env.NODE_ENV !== 'production') {\n    const existingKeys = new Set();\n    for (const key of parser.keys) {\n      if (existingKeys.has(key.name)) warn(`Found duplicated params with name \"${key.name}\" for path \"${record.path}\". Only the last one will be available on \"$route.params\".`);\n      existingKeys.add(key.name);\n    }\n  }\n  const matcher = assign(parser, {\n    record,\n    parent,\n    // these needs to be populated by the parent\n    children: [],\n    alias: []\n  });\n  if (parent) {\n    // both are aliases or both are not aliases\n    // we don't want to mix them because the order is used when\n    // passing originalRecord in Matcher.addRoute\n    if (!matcher.record.aliasOf === !parent.record.aliasOf) parent.children.push(matcher);\n  }\n  return matcher;\n}\n\n/**\r\n * Creates a Router Matcher.\r\n *\r\n * @internal\r\n * @param routes - array of initial routes\r\n * @param globalOptions - global route options\r\n */\nfunction createRouterMatcher(routes, globalOptions) {\n  // normalized ordered array of matchers\n  const matchers = [];\n  const matcherMap = new Map();\n  globalOptions = mergeOptions({\n    strict: false,\n    end: true,\n    sensitive: false\n  }, globalOptions);\n  function getRecordMatcher(name) {\n    return matcherMap.get(name);\n  }\n  function addRoute(record, parent, originalRecord) {\n    // used later on to remove by name\n    let isRootAdd = !originalRecord;\n    let mainNormalizedRecord = normalizeRouteRecord(record);\n    // we might be the child of an alias\n    mainNormalizedRecord.aliasOf = originalRecord && originalRecord.record;\n    const options = mergeOptions(globalOptions, record);\n    // generate an array of records to correctly handle aliases\n    const normalizedRecords = [mainNormalizedRecord];\n    if ('alias' in record) {\n      const aliases = typeof record.alias === 'string' ? [record.alias] : record.alias;\n      for (const alias of aliases) {\n        normalizedRecords.push(assign({}, mainNormalizedRecord, {\n          // this allows us to hold a copy of the `components` option\n          // so that async components cache is hold on the original record\n          components: originalRecord ? originalRecord.record.components : mainNormalizedRecord.components,\n          path: alias,\n          // we might be the child of an alias\n          aliasOf: originalRecord ? originalRecord.record : mainNormalizedRecord\n        }));\n      }\n    }\n    let matcher;\n    let originalMatcher;\n    for (const normalizedRecord of normalizedRecords) {\n      let {\n        path\n      } = normalizedRecord;\n      // Build up the path for nested routes if the child isn't an absolute\n      // route. Only add the / delimiter if the child path isn't empty and if the\n      // parent path doesn't have a trailing slash\n      if (parent && path[0] !== '/') {\n        let parentPath = parent.record.path;\n        let connectingSlash = parentPath[parentPath.length - 1] === '/' ? '' : '/';\n        normalizedRecord.path = parent.record.path + (path && connectingSlash + path);\n      }\n      if (process.env.NODE_ENV !== 'production' && normalizedRecord.path === '*') {\n        throw new Error('Catch all routes (\"*\") must now be defined using a param with a custom regexp.\\n' + 'See more at https://next.router.vuejs.org/guide/migration/#removed-star-or-catch-all-routes.');\n      }\n      // create the object before hand so it can be passed to children\n      matcher = createRouteRecordMatcher(normalizedRecord, parent, options);\n      if (process.env.NODE_ENV !== 'production' && parent && path[0] === '/') checkMissingParamsInAbsolutePath(matcher, parent);\n      // if we are an alias we must tell the original record that we exist\n      // so we can be removed\n      if (originalRecord) {\n        originalRecord.alias.push(matcher);\n        if (process.env.NODE_ENV !== 'production') {\n          checkSameParams(originalRecord, matcher);\n        }\n      } else {\n        // otherwise, the first record is the original and others are aliases\n        originalMatcher = originalMatcher || matcher;\n        if (originalMatcher !== matcher) originalMatcher.alias.push(matcher);\n        // remove the route if named and only for the top record (avoid in nested calls)\n        // this works because the original record is the first one\n        if (isRootAdd && record.name && !isAliasRecord(matcher)) removeRoute(record.name);\n      }\n      if ('children' in mainNormalizedRecord) {\n        let children = mainNormalizedRecord.children;\n        for (let i = 0; i < children.length; i++) {\n          addRoute(children[i], matcher, originalRecord && originalRecord.children[i]);\n        }\n      }\n      // if there was no original record, then the first one was not an alias and all\n      // other alias (if any) need to reference this record when adding children\n      originalRecord = originalRecord || matcher;\n      insertMatcher(matcher);\n    }\n    return originalMatcher ? () => {\n      // since other matchers are aliases, they should be removed by the original matcher\n      removeRoute(originalMatcher);\n    } : noop;\n  }\n  function removeRoute(matcherRef) {\n    if (isRouteName(matcherRef)) {\n      const matcher = matcherMap.get(matcherRef);\n      if (matcher) {\n        matcherMap.delete(matcherRef);\n        matchers.splice(matchers.indexOf(matcher), 1);\n        matcher.children.forEach(removeRoute);\n        matcher.alias.forEach(removeRoute);\n      }\n    } else {\n      let index = matchers.indexOf(matcherRef);\n      if (index > -1) {\n        matchers.splice(index, 1);\n        if (matcherRef.record.name) matcherMap.delete(matcherRef.record.name);\n        matcherRef.children.forEach(removeRoute);\n        matcherRef.alias.forEach(removeRoute);\n      }\n    }\n  }\n  function getRoutes() {\n    return matchers;\n  }\n  function insertMatcher(matcher) {\n    let i = 0;\n    // console.log('i is', { i })\n    while (i < matchers.length && comparePathParserScore(matcher, matchers[i]) >= 0) i++;\n    // console.log('END i is', { i })\n    // while (i < matchers.length && matcher.score <= matchers[i].score) i++\n    matchers.splice(i, 0, matcher);\n    // only add the original record to the name map\n    if (matcher.record.name && !isAliasRecord(matcher)) matcherMap.set(matcher.record.name, matcher);\n  }\n  function resolve(location, currentLocation) {\n    let matcher;\n    let params = {};\n    let path;\n    let name;\n    if ('name' in location && location.name) {\n      matcher = matcherMap.get(location.name);\n      if (!matcher) throw createRouterError(1 /* MATCHER_NOT_FOUND */, {\n        location\n      });\n      name = matcher.record.name;\n      params = assign(\n      // paramsFromLocation is a new object\n      paramsFromLocation(currentLocation.params,\n      // only keep params that exist in the resolved location\n      // TODO: only keep optional params coming from a parent record\n      matcher.keys.filter(k => !k.optional).map(k => k.name)), location.params);\n      // throws if cannot be stringified\n      path = matcher.stringify(params);\n    } else if ('path' in location) {\n      // no need to resolve the path with the matcher as it was provided\n      // this also allows the user to control the encoding\n      path = location.path;\n      if (process.env.NODE_ENV !== 'production' && !path.startsWith('/')) {\n        warn(`The Matcher cannot resolve relative paths but received \"${path}\". Unless you directly called \\`matcher.resolve(\"${path}\")\\`, this is probably a bug in vue-router. Please open an issue at https://new-issue.vuejs.org/?repo=vuejs/vue-router-next.`);\n      }\n      matcher = matchers.find(m => m.re.test(path));\n      // matcher should have a value after the loop\n      if (matcher) {\n        // TODO: dev warning of unused params if provided\n        // we know the matcher works because we tested the regexp\n        params = matcher.parse(path);\n        name = matcher.record.name;\n      }\n      // location is a relative path\n    } else {\n      // match by name or path of current route\n      matcher = currentLocation.name ? matcherMap.get(currentLocation.name) : matchers.find(m => m.re.test(currentLocation.path));\n      if (!matcher) throw createRouterError(1 /* MATCHER_NOT_FOUND */, {\n        location,\n        currentLocation\n      });\n      name = matcher.record.name;\n      // since we are navigating to the same location, we don't need to pick the\n      // params like when `name` is provided\n      params = assign({}, currentLocation.params, location.params);\n      path = matcher.stringify(params);\n    }\n    const matched = [];\n    let parentMatcher = matcher;\n    while (parentMatcher) {\n      // reversed order so parents are at the beginning\n      matched.unshift(parentMatcher.record);\n      parentMatcher = parentMatcher.parent;\n    }\n    return {\n      name,\n      path,\n      params,\n      matched,\n      meta: mergeMetaFields(matched)\n    };\n  }\n  // add initial routes\n  routes.forEach(route => addRoute(route));\n  return {\n    addRoute,\n    resolve,\n    removeRoute,\n    getRoutes,\n    getRecordMatcher\n  };\n}\nfunction paramsFromLocation(params, keys) {\n  let newParams = {};\n  for (let key of keys) {\n    if (key in params) newParams[key] = params[key];\n  }\n  return newParams;\n}\n/**\r\n * Normalizes a RouteRecordRaw. Creates a copy\r\n *\r\n * @param record\r\n * @returns the normalized version\r\n */\nfunction normalizeRouteRecord(record) {\n  return {\n    path: record.path,\n    redirect: record.redirect,\n    name: record.name,\n    meta: record.meta || {},\n    aliasOf: undefined,\n    beforeEnter: record.beforeEnter,\n    props: normalizeRecordProps(record),\n    children: record.children || [],\n    instances: {},\n    leaveGuards: [],\n    updateGuards: [],\n    enterCallbacks: {},\n    components: 'components' in record ? record.components || {} : {\n      default: record.component\n    }\n  };\n}\n/**\r\n * Normalize the optional `props` in a record to always be an object similar to\r\n * components. Also accept a boolean for components.\r\n * @param record\r\n */\nfunction normalizeRecordProps(record) {\n  const propsObject = {};\n  // props does not exist on redirect records but we can set false directly\n  const props = record.props || false;\n  if ('component' in record) {\n    propsObject.default = props;\n  } else {\n    // NOTE: we could also allow a function to be applied to every component.\n    // Would need user feedback for use cases\n    for (let name in record.components) propsObject[name] = typeof props === 'boolean' ? props : props[name];\n  }\n  return propsObject;\n}\n/**\r\n * Checks if a record or any of its parent is an alias\r\n * @param record\r\n */\nfunction isAliasRecord(record) {\n  while (record) {\n    if (record.record.aliasOf) return true;\n    record = record.parent;\n  }\n  return false;\n}\n/**\r\n * Merge meta fields of an array of records\r\n *\r\n * @param matched - array of matched records\r\n */\nfunction mergeMetaFields(matched) {\n  return matched.reduce((meta, record) => assign(meta, record.meta), {});\n}\nfunction mergeOptions(defaults, partialOptions) {\n  let options = {};\n  for (let key in defaults) {\n    options[key] = key in partialOptions ? partialOptions[key] : defaults[key];\n  }\n  return options;\n}\nfunction isSameParam(a, b) {\n  return a.name === b.name && a.optional === b.optional && a.repeatable === b.repeatable;\n}\nfunction checkSameParams(a, b) {\n  for (let key of a.keys) {\n    if (!b.keys.find(isSameParam.bind(null, key))) return warn(`Alias \"${b.record.path}\" and the original record: \"${a.record.path}\" should have the exact same param named \"${key.name}\"`);\n  }\n  for (let key of b.keys) {\n    if (!a.keys.find(isSameParam.bind(null, key))) return warn(`Alias \"${b.record.path}\" and the original record: \"${a.record.path}\" should have the exact same param named \"${key.name}\"`);\n  }\n}\nfunction checkMissingParamsInAbsolutePath(record, parent) {\n  for (let key of parent.keys) {\n    if (!record.keys.find(isSameParam.bind(null, key))) return warn(`Absolute path \"${record.record.path}\" should have the exact same param named \"${key.name}\" as its parent \"${parent.record.path}\".`);\n  }\n}\n\n/**\r\n * Encoding Rules ␣ = Space Path: ␣ \" < > # ? { } Query: ␣ \" < > # & = Hash: ␣ \"\r\n * < > `\r\n *\r\n * On top of that, the RFC3986 (https://tools.ietf.org/html/rfc3986#section-2.2)\r\n * defines some extra characters to be encoded. Most browsers do not encode them\r\n * in encodeURI https://github.com/whatwg/url/issues/369, so it may be safer to\r\n * also encode `!'()*`. Leaving unencoded only ASCII alphanumeric(`a-zA-Z0-9`)\r\n * plus `-._~`. This extra safety should be applied to query by patching the\r\n * string returned by encodeURIComponent encodeURI also encodes `[\\]^`. `\\`\r\n * should be encoded to avoid ambiguity. Browsers (IE, FF, C) transform a `\\`\r\n * into a `/` if directly typed in. The _backtick_ (`````) should also be\r\n * encoded everywhere because some browsers like FF encode it when directly\r\n * written while others don't. Safari and IE don't encode ``\"<>{}``` in hash.\r\n */\n// const EXTRA_RESERVED_RE = /[!'()*]/g\n// const encodeReservedReplacer = (c: string) => '%' + c.charCodeAt(0).toString(16)\nconst HASH_RE = /#/g; // %23\nconst AMPERSAND_RE = /&/g; // %26\nconst SLASH_RE = /\\//g; // %2F\nconst EQUAL_RE = /=/g; // %3D\nconst IM_RE = /\\?/g; // %3F\nconst ENC_BRACKET_OPEN_RE = /%5B/g; // [\nconst ENC_BRACKET_CLOSE_RE = /%5D/g; // ]\nconst ENC_CARET_RE = /%5E/g; // ^\nconst ENC_BACKTICK_RE = /%60/g; // `\nconst ENC_CURLY_OPEN_RE = /%7B/g; // {\nconst ENC_PIPE_RE = /%7C/g; // |\nconst ENC_CURLY_CLOSE_RE = /%7D/g; // }\n/**\r\n * Encode characters that need to be encoded on the path, search and hash\r\n * sections of the URL.\r\n *\r\n * @internal\r\n * @param text - string to encode\r\n * @returns encoded string\r\n */\nfunction commonEncode(text) {\n  return encodeURI('' + text).replace(ENC_PIPE_RE, '|').replace(ENC_BRACKET_OPEN_RE, '[').replace(ENC_BRACKET_CLOSE_RE, ']');\n}\n/**\r\n * Encode characters that need to be encoded on the hash section of the URL.\r\n *\r\n * @param text - string to encode\r\n * @returns encoded string\r\n */\nfunction encodeHash(text) {\n  return commonEncode(text).replace(ENC_CURLY_OPEN_RE, '{').replace(ENC_CURLY_CLOSE_RE, '}').replace(ENC_CARET_RE, '^');\n}\n/**\r\n * Encode characters that need to be encoded query values on the query\r\n * section of the URL.\r\n *\r\n * @param text - string to encode\r\n * @returns encoded string\r\n */\nfunction encodeQueryValue(text) {\n  return commonEncode(text).replace(HASH_RE, '%23').replace(AMPERSAND_RE, '%26').replace(ENC_BACKTICK_RE, '`').replace(ENC_CURLY_OPEN_RE, '{').replace(ENC_CURLY_CLOSE_RE, '}').replace(ENC_CARET_RE, '^');\n}\n/**\r\n * Like `encodeQueryValue` but also encodes the `=` character.\r\n *\r\n * @param text - string to encode\r\n */\nfunction encodeQueryKey(text) {\n  return encodeQueryValue(text).replace(EQUAL_RE, '%3D');\n}\n/**\r\n * Encode characters that need to be encoded on the path section of the URL.\r\n *\r\n * @param text - string to encode\r\n * @returns encoded string\r\n */\nfunction encodePath(text) {\n  return commonEncode(text).replace(HASH_RE, '%23').replace(IM_RE, '%3F');\n}\n/**\r\n * Encode characters that need to be encoded on the path section of the URL as a\r\n * param. This function encodes everything {@link encodePath} does plus the\r\n * slash (`/`) character.\r\n *\r\n * @param text - string to encode\r\n * @returns encoded string\r\n */\nfunction encodeParam(text) {\n  return encodePath(text).replace(SLASH_RE, '%2F');\n}\n/**\r\n * Decode text using `decodeURIComponent`. Returns the original text if it\r\n * fails.\r\n *\r\n * @param text - string to decode\r\n * @returns decoded string\r\n */\nfunction decode(text) {\n  try {\n    return decodeURIComponent('' + text);\n  } catch (err) {\n    process.env.NODE_ENV !== 'production' && warn(`Error decoding \"${text}\". Using original value`);\n  }\n  return '' + text;\n}\n\n/**\r\n * Transforms a queryString into a {@link LocationQuery} object. Accept both, a\r\n * version with the leading `?` and without Should work as URLSearchParams\r\n\n * @internal\r\n *\r\n * @param search - search string to parse\r\n * @returns a query object\r\n */\nfunction parseQuery(search) {\n  const query = {};\n  // avoid creating an object with an empty key and empty value\n  // because of split('&')\n  if (search === '' || search === '?') return query;\n  const hasLeadingIM = search[0] === '?';\n  const searchParams = (hasLeadingIM ? search.slice(1) : search).split('&');\n  for (let i = 0; i < searchParams.length; ++i) {\n    const searchParam = searchParams[i];\n    // allow the = character\n    let eqPos = searchParam.indexOf('=');\n    let key = decode(eqPos < 0 ? searchParam : searchParam.slice(0, eqPos));\n    let value = eqPos < 0 ? null : decode(searchParam.slice(eqPos + 1));\n    if (key in query) {\n      // an extra variable for ts types\n      let currentValue = query[key];\n      if (!Array.isArray(currentValue)) {\n        currentValue = query[key] = [currentValue];\n      }\n      currentValue.push(value);\n    } else {\n      query[key] = value;\n    }\n  }\n  return query;\n}\n/**\r\n * Stringifies a {@link LocationQueryRaw} object. Like `URLSearchParams`, it\r\n * doesn't prepend a `?`\r\n *\r\n * @internal\r\n *\r\n * @param query - query object to stringify\r\n * @returns string version of the query without the leading `?`\r\n */\nfunction stringifyQuery(query) {\n  let search = '';\n  for (let key in query) {\n    if (search.length) search += '&';\n    const value = query[key];\n    key = encodeQueryKey(key);\n    if (value == null) {\n      // only null adds the value\n      if (value !== undefined) search += key;\n      continue;\n    }\n    // keep null values\n    let values = Array.isArray(value) ? value.map(v => v && encodeQueryValue(v)) : [value && encodeQueryValue(value)];\n    for (let i = 0; i < values.length; i++) {\n      // only append & with i > 0\n      search += (i ? '&' : '') + key;\n      if (values[i] != null) search += '=' + values[i];\n    }\n  }\n  return search;\n}\n/**\r\n * Transforms a {@link LocationQueryRaw} into a {@link LocationQuery} by casting\r\n * numbers into strings, removing keys with an undefined value and replacing\r\n * undefined with null in arrays\r\n *\r\n * @param query - query object to normalize\r\n * @returns a normalized query object\r\n */\nfunction normalizeQuery(query) {\n  const normalizedQuery = {};\n  for (let key in query) {\n    let value = query[key];\n    if (value !== undefined) {\n      normalizedQuery[key] = Array.isArray(value) ? value.map(v => v == null ? null : '' + v) : value == null ? value : '' + value;\n    }\n  }\n  return normalizedQuery;\n}\n\n/**\r\n * Create a list of callbacks that can be reset. Used to create before and after navigation guards list\r\n */\nfunction useCallbacks() {\n  let handlers = [];\n  function add(handler) {\n    handlers.push(handler);\n    return () => {\n      const i = handlers.indexOf(handler);\n      if (i > -1) handlers.splice(i, 1);\n    };\n  }\n  function reset() {\n    handlers = [];\n  }\n  return {\n    add,\n    list: () => handlers,\n    reset\n  };\n}\nfunction registerGuard(list, guard) {\n  const removeFromList = () => {\n    const index = list.indexOf(guard);\n    if (index > -1) list.splice(index, 1);\n  };\n  onUnmounted(removeFromList);\n  onDeactivated(removeFromList);\n  onActivated(() => {\n    const index = list.indexOf(guard);\n    if (index < 0) list.push(guard);\n  });\n  list.push(guard);\n}\n/**\r\n * Add a navigation guard that triggers whenever the component for the current\r\n * location is about to be left. Similar to {@link beforeRouteLeave} but can be\r\n * used in any component. The guard is removed when the component is unmounted.\r\n *\r\n * @param leaveGuard - {@link NavigationGuard}\r\n */\nfunction onBeforeRouteLeave(leaveGuard) {\n  if (process.env.NODE_ENV !== 'production' && !getCurrentInstance()) {\n    warn$1('onBeforeRouteLeave must be called at the top of a setup function');\n    return;\n  }\n  const activeRecord = inject(matchedRouteKey, {}).value;\n  if (!activeRecord) {\n    process.env.NODE_ENV !== 'production' && warn$1('onBeforeRouteLeave must be called at the top of a setup function');\n    return;\n  }\n  registerGuard(activeRecord.leaveGuards, leaveGuard);\n}\n/**\r\n * Add a navigation guard that triggers whenever the current location is about\r\n * to be updated. Similar to {@link beforeRouteUpdate} but can be used in any\r\n * component. The guard is removed when the component is unmounted.\r\n *\r\n * @param updateGuard - {@link NavigationGuard}\r\n */\nfunction onBeforeRouteUpdate(updateGuard) {\n  if (process.env.NODE_ENV !== 'production' && !getCurrentInstance()) {\n    warn$1('onBeforeRouteUpdate must be called at the top of a setup function');\n    return;\n  }\n  const activeRecord = inject(matchedRouteKey, {}).value;\n  if (!activeRecord) {\n    process.env.NODE_ENV !== 'production' && warn$1('onBeforeRouteUpdate must be called at the top of a setup function');\n    return;\n  }\n  registerGuard(activeRecord.updateGuards, updateGuard);\n}\nfunction guardToPromiseFn(guard, to, from, record, name) {\n  // keep a reference to the enterCallbackArray to prevent pushing callbacks if a new navigation took place\n  const enterCallbackArray = record && (\n  // name is defined if record is because of the function overload\n  record.enterCallbacks[name] = record.enterCallbacks[name] || []);\n  return () => new Promise((resolve, reject) => {\n    const next = valid => {\n      if (valid === false) reject(createRouterError(4 /* NAVIGATION_ABORTED */, {\n        from,\n        to\n      }));else if (valid instanceof Error) {\n        reject(valid);\n      } else if (isRouteLocation(valid)) {\n        reject(createRouterError(2 /* NAVIGATION_GUARD_REDIRECT */, {\n          from: to,\n          to: valid\n        }));\n      } else {\n        if (enterCallbackArray &&\n        // since enterCallbackArray is truthy, both record and name also are\n        record.enterCallbacks[name] === enterCallbackArray && typeof valid === 'function') enterCallbackArray.push(valid);\n        resolve();\n      }\n    };\n    // wrapping with Promise.resolve allows it to work with both async and sync guards\n    const guardReturn = guard.call(record && record.instances[name], to, from, process.env.NODE_ENV !== 'production' ? canOnlyBeCalledOnce(next, to, from) : next);\n    let guardCall = Promise.resolve(guardReturn);\n    if (guard.length < 3) guardCall = guardCall.then(next);\n    if (process.env.NODE_ENV !== 'production' && guard.length > 2) {\n      const message = `The \"next\" callback was never called inside of ${guard.name ? '\"' + guard.name + '\"' : ''}:\\n${guard.toString()}\\n. If you are returning a value instead of calling \"next\", make sure to remove the \"next\" parameter from your function.`;\n      if (typeof guardReturn === 'object' && 'then' in guardReturn) {\n        guardCall = guardCall.then(resolvedValue => {\n          // @ts-ignore: _called is added at canOnlyBeCalledOnce\n          if (!next._called) {\n            warn$1(message);\n            return Promise.reject(new Error('Invalid navigation guard'));\n          }\n          return resolvedValue;\n        });\n        // TODO: test me!\n      } else if (guardReturn !== undefined) {\n        // @ts-ignore: _called is added at canOnlyBeCalledOnce\n        if (!next._called) {\n          warn$1(message);\n          reject(new Error('Invalid navigation guard'));\n          return;\n        }\n      }\n    }\n    guardCall.catch(err => reject(err));\n  });\n}\nfunction canOnlyBeCalledOnce(next, to, from) {\n  let called = 0;\n  return function () {\n    if (called++ === 1) warn$1(`The \"next\" callback was called more than once in one navigation guard when going from \"${from.fullPath}\" to \"${to.fullPath}\". It should be called exactly one time in each navigation guard. This will fail in production.`);\n    // @ts-ignore: we put it in the original one because it's easier to check\n    next._called = true;\n    if (called === 1) next.apply(null, arguments);\n  };\n}\nfunction extractComponentsGuards(matched, guardType, to, from) {\n  const guards = [];\n  for (const record of matched) {\n    for (const name in record.components) {\n      let rawComponent = record.components[name];\n      // warn if user wrote import('/component.vue') instead of () => import('./component.vue')\n      if (process.env.NODE_ENV !== 'production' && 'then' in rawComponent) {\n        warn$1(`Component \"${name}\" in record with path \"${record.path}\" is a Promise instead of a function that returns a Promise. Did you write \"import('./MyPage.vue')\" instead of \"() => import('./MyPage.vue')\"? This will break in production if not fixed.`);\n        let promise = rawComponent;\n        rawComponent = () => promise;\n      }\n      // skip update and leave guards if the route component is not mounted\n      if (guardType !== 'beforeRouteEnter' && !record.instances[name]) continue;\n      if (isRouteComponent(rawComponent)) {\n        // __vccOpts is added by vue-class-component and contain the regular options\n        let options = rawComponent.__vccOpts || rawComponent;\n        const guard = options[guardType];\n        guard && guards.push(guardToPromiseFn(guard, to, from, record, name));\n      } else {\n        // start requesting the chunk already\n        let componentPromise = rawComponent();\n        if (process.env.NODE_ENV !== 'production' && !('catch' in componentPromise)) {\n          warn$1(`Component \"${name}\" in record with path \"${record.path}\" is a function that does not return a Promise. If you were passing a functional component, make sure to add a \"displayName\" to the component. This will break in production if not fixed.`);\n          componentPromise = Promise.resolve(componentPromise);\n        } else {\n          // display the error if any\n          componentPromise = componentPromise.catch(process.env.NODE_ENV !== 'production' ? err => err && warn$1(err) : console.error);\n        }\n        guards.push(() => componentPromise.then(resolved => {\n          if (!resolved) return Promise.reject(new Error(`Couldn't resolve component \"${name}\" at \"${record.path}\"`));\n          const resolvedComponent = isESModule(resolved) ? resolved.default : resolved;\n          // replace the function with the resolved component\n          record.components[name] = resolvedComponent;\n          // @ts-ignore: the options types are not propagated to Component\n          const guard = resolvedComponent[guardType];\n          return guard && guardToPromiseFn(guard, to, from, record, name)();\n        }));\n      }\n    }\n  }\n  return guards;\n}\n/**\r\n * Allows differentiating lazy components from functional components and vue-class-component\r\n * @param component\r\n */\nfunction isRouteComponent(component) {\n  return typeof component === 'object' || 'displayName' in component || 'props' in component || '__vccOpts' in component;\n}\n\n// TODO: we could allow currentRoute as a prop to expose `isActive` and\n// `isExactActive` behavior should go through an RFC\nfunction useLink(props) {\n  const router = inject(routerKey);\n  const currentRoute = inject(routeLocationKey);\n  const route = computed(() => router.resolve(unref(props.to)));\n  const activeRecordIndex = computed(() => {\n    let {\n      matched\n    } = route.value;\n    let {\n      length\n    } = matched;\n    const routeMatched = matched[length - 1];\n    let currentMatched = currentRoute.matched;\n    if (!routeMatched || !currentMatched.length) return -1;\n    let index = currentMatched.findIndex(isSameRouteRecord.bind(null, routeMatched));\n    if (index > -1) return index;\n    // possible parent record\n    let parentRecordPath = getOriginalPath(matched[length - 2]);\n    return (\n      // we are dealing with nested routes\n      length > 1 &&\n      // if the parent and matched route have the same path, this link is\n      // referring to the empty child. Or we currently are on a different\n      // child of the same parent\n      getOriginalPath(routeMatched) === parentRecordPath &&\n      // avoid comparing the child with its parent\n      currentMatched[currentMatched.length - 1].path !== parentRecordPath ? currentMatched.findIndex(isSameRouteRecord.bind(null, matched[length - 2])) : index\n    );\n  });\n  const isActive = computed(() => activeRecordIndex.value > -1 && includesParams(currentRoute.params, route.value.params));\n  const isExactActive = computed(() => activeRecordIndex.value > -1 && activeRecordIndex.value === currentRoute.matched.length - 1 && isSameRouteLocationParams(currentRoute.params, route.value.params));\n  function navigate(e = {}) {\n    if (guardEvent(e)) return router[unref(props.replace) ? 'replace' : 'push'](unref(props.to));\n    return Promise.resolve();\n  }\n  return {\n    route,\n    href: computed(() => route.value.href),\n    isActive,\n    isExactActive,\n    navigate\n  };\n}\nconst RouterLinkImpl = defineComponent({\n  name: 'RouterLink',\n  props: {\n    to: {\n      type: [String, Object],\n      required: true\n    },\n    activeClass: String,\n    // inactiveClass: String,\n    exactActiveClass: String,\n    custom: Boolean,\n    ariaCurrentValue: {\n      type: String,\n      default: 'page'\n    }\n  },\n  setup(props, {\n    slots,\n    attrs\n  }) {\n    const link = reactive(useLink(props));\n    const {\n      options\n    } = inject(routerKey);\n    const elClass = computed(() => ({\n      [getLinkClass(props.activeClass, options.linkActiveClass, 'router-link-active')]: link.isActive,\n      // [getLinkClass(\n      //   props.inactiveClass,\n      //   options.linkInactiveClass,\n      //   'router-link-inactive'\n      // )]: !link.isExactActive,\n      [getLinkClass(props.exactActiveClass, options.linkExactActiveClass, 'router-link-exact-active')]: link.isExactActive\n    }));\n    return () => {\n      const children = slots.default && slots.default(link);\n      return props.custom ? children : h('a', assign({\n        'aria-current': link.isExactActive ? props.ariaCurrentValue : null,\n        onClick: link.navigate,\n        href: link.href\n      }, attrs, {\n        class: elClass.value\n      }), children);\n    };\n  }\n});\n// export the public type for h/tsx inference\n// also to avoid inline import() in generated d.ts files\n/**\r\n * Component to render a link that triggers a navigation on click.\r\n */\nconst RouterLink = RouterLinkImpl;\nfunction guardEvent(e) {\n  // don't redirect with control keys\n  if (e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) return;\n  // don't redirect when preventDefault called\n  if (e.defaultPrevented) return;\n  // don't redirect on right click\n  if (e.button !== undefined && e.button !== 0) return;\n  // don't redirect if `target=\"_blank\"`\n  // @ts-ignore getAttribute does exist\n  if (e.currentTarget && e.currentTarget.getAttribute) {\n    // @ts-ignore getAttribute exists\n    const target = e.currentTarget.getAttribute('target');\n    if (/\\b_blank\\b/i.test(target)) return;\n  }\n  // this may be a Weex event which doesn't have this method\n  if (e.preventDefault) e.preventDefault();\n  return true;\n}\nfunction includesParams(outer, inner) {\n  for (let key in inner) {\n    let innerValue = inner[key];\n    let outerValue = outer[key];\n    if (typeof innerValue === 'string') {\n      if (innerValue !== outerValue) return false;\n    } else {\n      if (!Array.isArray(outerValue) || outerValue.length !== innerValue.length || innerValue.some((value, i) => value !== outerValue[i])) return false;\n    }\n  }\n  return true;\n}\n/**\r\n * Get the original path value of a record by following its aliasOf\r\n * @param record\r\n */\nfunction getOriginalPath(record) {\n  return record ? record.aliasOf ? record.aliasOf.path : record.path : '';\n}\n/**\r\n * Utility class to get the active class based on defaults.\r\n * @param propClass\r\n * @param globalClass\r\n * @param defaultClass\r\n */\nlet getLinkClass = (propClass, globalClass, defaultClass) => propClass != null ? propClass : globalClass != null ? globalClass : defaultClass;\nconst RouterViewImpl = defineComponent({\n  name: 'RouterView',\n  props: {\n    name: {\n      type: String,\n      default: 'default'\n    },\n    route: Object\n  },\n  setup(props, {\n    attrs,\n    slots\n  }) {\n    process.env.NODE_ENV !== 'production' && warnDeprecatedUsage();\n    const injectedRoute = inject(routeLocationKey);\n    const depth = inject(viewDepthKey, 0);\n    const matchedRouteRef = computed(() => (props.route || injectedRoute).matched[depth]);\n    provide(viewDepthKey, depth + 1);\n    provide(matchedRouteKey, matchedRouteRef);\n    const viewRef = ref();\n    // watch at the same time the component instance, the route record we are\n    // rendering, and the name\n    watch(() => [viewRef.value, matchedRouteRef.value, props.name], ([instance, to, name], [oldInstance, from, oldName]) => {\n      // copy reused instances\n      if (to) {\n        // this will update the instance for new instances as well as reused\n        // instances when navigating to a new route\n        to.instances[name] = instance;\n        // the component instance is reused for a different route or name so\n        // we copy any saved update or leave guards\n        if (from && instance === oldInstance) {\n          to.leaveGuards = from.leaveGuards;\n          to.updateGuards = from.updateGuards;\n        }\n      }\n      // trigger beforeRouteEnter next callbacks\n      if (instance && to && (\n      // if there is no instance but to and from are the same this might be\n      // the first visit\n      !from || !isSameRouteRecord(to, from) || !oldInstance)) {\n        (to.enterCallbacks[name] || []).forEach(callback => callback(instance));\n      }\n    }, {\n      flush: 'post'\n    });\n    return () => {\n      const route = props.route || injectedRoute;\n      const matchedRoute = matchedRouteRef.value;\n      const ViewComponent = matchedRoute && matchedRoute.components[props.name];\n      // we need the value at the time we render because when we unmount, we\n      // navigated to a different location so the value is different\n      const currentName = props.name;\n      if (!ViewComponent) {\n        return slots.default ? slots.default({\n          Component: ViewComponent,\n          route\n        }) : null;\n      }\n      // props from route configuration\n      const routePropsOption = matchedRoute.props[props.name];\n      const routeProps = routePropsOption ? routePropsOption === true ? route.params : typeof routePropsOption === 'function' ? routePropsOption(route) : routePropsOption : null;\n      const onVnodeUnmounted = vnode => {\n        // remove the instance reference to prevent leak\n        if (vnode.component.isUnmounted) {\n          matchedRoute.instances[currentName] = null;\n        }\n      };\n      const component = h(ViewComponent, assign({}, routeProps, attrs, {\n        onVnodeUnmounted,\n        ref: viewRef\n      }));\n      return (\n        // pass the vnode to the slot as a prop.\n        // h and <component :is=\"...\"> both accept vnodes\n        slots.default ? slots.default({\n          Component: component,\n          route\n        }) : component\n      );\n    };\n  }\n});\n// export the public type for h/tsx inference\n// also to avoid inline import() in generated d.ts files\n/**\r\n * Component to display the current route the user is at.\r\n */\nconst RouterView = RouterViewImpl;\n// warn against deprecated usage with <transition> & <keep-alive>\n// due to functional component being no longer eager in Vue 3\nfunction warnDeprecatedUsage() {\n  const instance = getCurrentInstance();\n  const parentName = instance.parent && instance.parent.type.name;\n  if (parentName && (parentName === 'KeepAlive' || parentName.includes('Transition'))) {\n    const comp = parentName === 'KeepAlive' ? 'keep-alive' : 'transition';\n    warn(`<router-view> can no longer be used directly inside <transition> or <keep-alive>.\\n` + `Use slot props instead:\\n\\n` + `<router-view v-slot=\"{ Component }\">\\n` + `  <${comp}>\\n` + `    <component :is=\"Component\" />\\n` + `  </${comp}>\\n` + `</router-view>`);\n  }\n}\n\n/**\r\n * Creates a Router instance that can be used by a Vue app.\r\n *\r\n * @param options - {@link RouterOptions}\r\n */\nfunction createRouter(options) {\n  const matcher = createRouterMatcher(options.routes, options);\n  let parseQuery$1 = options.parseQuery || parseQuery;\n  let stringifyQuery$1 = options.stringifyQuery || stringifyQuery;\n  let {\n    scrollBehavior\n  } = options;\n  let routerHistory = options.history;\n  const beforeGuards = useCallbacks();\n  const beforeResolveGuards = useCallbacks();\n  const afterGuards = useCallbacks();\n  const currentRoute = shallowRef(START_LOCATION_NORMALIZED);\n  let pendingLocation = START_LOCATION_NORMALIZED;\n  // leave the scrollRestoration if no scrollBehavior is provided\n  if (isBrowser && scrollBehavior && 'scrollRestoration' in history) {\n    history.scrollRestoration = 'manual';\n  }\n  const normalizeParams = applyToParams.bind(null, paramValue => '' + paramValue);\n  const encodeParams = applyToParams.bind(null, encodeParam);\n  const decodeParams = applyToParams.bind(null, decode);\n  function addRoute(parentOrRoute, route) {\n    let parent;\n    let record;\n    if (isRouteName(parentOrRoute)) {\n      parent = matcher.getRecordMatcher(parentOrRoute);\n      record = route;\n    } else {\n      record = parentOrRoute;\n    }\n    return matcher.addRoute(record, parent);\n  }\n  function removeRoute(name) {\n    let recordMatcher = matcher.getRecordMatcher(name);\n    if (recordMatcher) {\n      matcher.removeRoute(recordMatcher);\n    } else if (process.env.NODE_ENV !== 'production') {\n      warn(`Cannot remove non-existent route \"${String(name)}\"`);\n    }\n  }\n  function getRoutes() {\n    return matcher.getRoutes().map(routeMatcher => routeMatcher.record);\n  }\n  function hasRoute(name) {\n    return !!matcher.getRecordMatcher(name);\n  }\n  function resolve(rawLocation, currentLocation) {\n    // const objectLocation = routerLocationAsObject(rawLocation)\n    // we create a copy to modify it later\n    currentLocation = assign({}, currentLocation || currentRoute.value);\n    if (typeof rawLocation === 'string') {\n      let locationNormalized = parseURL(parseQuery$1, rawLocation, currentLocation.path);\n      let matchedRoute = matcher.resolve({\n        path: locationNormalized.path\n      }, currentLocation);\n      let href = routerHistory.createHref(locationNormalized.fullPath);\n      if (process.env.NODE_ENV !== 'production') {\n        if (href.startsWith('//')) warn(`Location \"${rawLocation}\" resolved to \"${href}\". A resolved location cannot start with multiple slashes.`);else if (!matchedRoute.matched.length) {\n          warn(`No match found for location with path \"${rawLocation}\"`);\n        }\n      }\n      // locationNormalized is always a new object\n      return assign(locationNormalized, matchedRoute, {\n        params: decodeParams(matchedRoute.params),\n        hash: decode(locationNormalized.hash),\n        redirectedFrom: undefined,\n        href\n      });\n    }\n    let matcherLocation;\n    // path could be relative in object as well\n    if ('path' in rawLocation) {\n      if (process.env.NODE_ENV !== 'production' && 'params' in rawLocation && !('name' in rawLocation) && Object.keys(rawLocation.params).length) {\n        warn(`Path \"${rawLocation.path}\" was passed with params but they will be ignored. Use a named route alongside params instead.`);\n      }\n      matcherLocation = assign({}, rawLocation, {\n        path: parseURL(parseQuery$1, rawLocation.path, currentLocation.path).path\n      });\n    } else {\n      // pass encoded values to the matcher so it can produce encoded path and fullPath\n      matcherLocation = assign({}, rawLocation, {\n        params: encodeParams(rawLocation.params)\n      });\n      // current location params are decoded, we need to encode them in case the\n      // matcher merges the params\n      currentLocation.params = encodeParams(currentLocation.params);\n    }\n    let matchedRoute = matcher.resolve(matcherLocation, currentLocation);\n    const hash = rawLocation.hash || '';\n    if (process.env.NODE_ENV !== 'production' && hash && !hash.startsWith('#')) {\n      warn(`A \\`hash\\` should always start with the character \"#\". Replace \"${hash}\" with \"#${hash}\".`);\n    }\n    // decoding them) the matcher might have merged current location params so\n    // we need to run the decoding again\n    matchedRoute.params = normalizeParams(decodeParams(matchedRoute.params));\n    const fullPath = stringifyURL(stringifyQuery$1, assign({}, rawLocation, {\n      hash: encodeHash(hash),\n      path: matchedRoute.path\n    }));\n    let href = routerHistory.createHref(fullPath);\n    if (process.env.NODE_ENV !== 'production') {\n      if (href.startsWith('//')) {\n        warn(`Location \"${rawLocation}\" resolved to \"${href}\". A resolved location cannot start with multiple slashes.`);\n      } else if (!matchedRoute.matched.length) {\n        warn(`No match found for location with path \"${'path' in rawLocation ? rawLocation.path : rawLocation}\"`);\n      }\n    }\n    return assign({\n      fullPath,\n      // keep the hash encoded so fullPath is effectively path + encodedQuery +\n      // hash\n      hash,\n      query:\n      // if the user is using a custom query lib like qs, we might have\n      // nested objects, so we keep the query as is, meaning it can contain\n      // numbers at `$route.query`, but at the point, the user will have to\n      // use their own type anyway.\n      // https://github.com/vuejs/vue-router-next/issues/328#issuecomment-649481567\n      stringifyQuery$1 === stringifyQuery ? normalizeQuery(rawLocation.query) : rawLocation.query\n    }, matchedRoute, {\n      redirectedFrom: undefined,\n      href\n    });\n  }\n  function locationAsObject(to) {\n    return typeof to === 'string' ? {\n      path: to\n    } : assign({}, to);\n  }\n  function checkCanceledNavigation(to, from) {\n    if (pendingLocation !== to) {\n      return createRouterError(8 /* NAVIGATION_CANCELLED */, {\n        from,\n        to\n      });\n    }\n  }\n  function push(to) {\n    return pushWithRedirect(to);\n  }\n  function replace(to) {\n    return push(assign(locationAsObject(to), {\n      replace: true\n    }));\n  }\n  function pushWithRedirect(to, redirectedFrom) {\n    const targetLocation = pendingLocation = resolve(to);\n    const from = currentRoute.value;\n    const data = to.state;\n    const force = to.force;\n    // to could be a string where `replace` is a function\n    const replace = to.replace === true;\n    const lastMatched = targetLocation.matched[targetLocation.matched.length - 1];\n    if (lastMatched && lastMatched.redirect) {\n      const {\n        redirect\n      } = lastMatched;\n      // transform it into an object to pass the original RouteLocaleOptions\n      let newTargetLocation = locationAsObject(typeof redirect === 'function' ? redirect(targetLocation) : redirect);\n      if (process.env.NODE_ENV !== 'production' && !('path' in newTargetLocation) && !('name' in newTargetLocation)) {\n        warn(`Invalid redirect found:\\n${JSON.stringify(newTargetLocation, null, 2)}\\n when navigating to \"${targetLocation.fullPath}\". A redirect must contain a name or path. This will break in production.`);\n        return Promise.reject(new Error('Invalid redirect'));\n      }\n      return pushWithRedirect(assign({\n        query: targetLocation.query,\n        hash: targetLocation.hash,\n        params: targetLocation.params\n      }, newTargetLocation, {\n        state: data,\n        force,\n        replace\n      }),\n      // keep original redirectedFrom if it exists\n      redirectedFrom || targetLocation);\n    }\n    // if it was a redirect we already called `pushWithRedirect` above\n    const toLocation = targetLocation;\n    toLocation.redirectedFrom = redirectedFrom;\n    let failure;\n    if (!force && isSameRouteLocation(stringifyQuery$1, from, targetLocation)) {\n      failure = createRouterError(16 /* NAVIGATION_DUPLICATED */, {\n        to: toLocation,\n        from\n      });\n      // trigger scroll to allow scrolling to the same anchor\n      handleScroll(from, from,\n      // this is a push, the only way for it to be triggered from a\n      // history.listen is with a redirect, which makes it become a pus\n      true,\n      // This cannot be the first navigation because the initial location\n      // cannot be manually navigated to\n      false);\n    }\n    return (failure ? Promise.resolve(failure) : navigate(toLocation, from)).catch(error => {\n      if (isNavigationFailure(error, 4 /* NAVIGATION_ABORTED */ | 8 /* NAVIGATION_CANCELLED */ | 2 /* NAVIGATION_GUARD_REDIRECT */)) {\n        return error;\n      }\n      // unknown error, rejects\n      return triggerError(error);\n    }).then(failure => {\n      if (failure) {\n        if (isNavigationFailure(failure, 2 /* NAVIGATION_GUARD_REDIRECT */)) {\n          if (process.env.NODE_ENV !== 'production' &&\n          // we are redirecting to the same location we were already at\n          isSameRouteLocation(stringifyQuery$1, resolve(failure.to), toLocation) &&\n          // and we have done it a couple of times\n          redirectedFrom &&\n          // @ts-ignore\n          (redirectedFrom._count = redirectedFrom._count ?\n          // @ts-ignore\n          redirectedFrom._count + 1 : 1) > 10) {\n            warn(`Detected an infinite redirection in a navigation guard when going from \"${from.fullPath}\" to \"${toLocation.fullPath}\". Aborting to avoid a Stack Overflow. This will break in production if not fixed.`);\n            return Promise.reject(new Error('Infinite redirect in navigation guard'));\n          }\n          return pushWithRedirect(\n          // keep options\n          assign(locationAsObject(failure.to), {\n            state: data,\n            force,\n            replace\n          }),\n          // preserve the original redirectedFrom if any\n          redirectedFrom || toLocation);\n        }\n      } else {\n        // if we fail we don't finalize the navigation\n        failure = finalizeNavigation(toLocation, from, true, replace, data);\n      }\n      triggerAfterEach(toLocation, from, failure);\n      return failure;\n    });\n  }\n  /**\r\n   * Helper to reject and skip all navigation guards if a new navigation happened\r\n   * @param to\r\n   * @param from\r\n   */\n  function checkCanceledNavigationAndReject(to, from) {\n    const error = checkCanceledNavigation(to, from);\n    return error ? Promise.reject(error) : Promise.resolve();\n  }\n  // TODO: refactor the whole before guards by internally using router.beforeEach\n  function navigate(to, from) {\n    let guards;\n    const [leavingRecords, updatingRecords, enteringRecords] = extractChangingRecords(to, from);\n    // all components here have been resolved once because we are leaving\n    guards = extractComponentsGuards(leavingRecords.reverse(), 'beforeRouteLeave', to, from);\n    // leavingRecords is already reversed\n    for (const record of leavingRecords) {\n      for (const guard of record.leaveGuards) {\n        guards.push(guardToPromiseFn(guard, to, from));\n      }\n    }\n    const canceledNavigationCheck = checkCanceledNavigationAndReject.bind(null, to, from);\n    guards.push(canceledNavigationCheck);\n    // run the queue of per route beforeRouteLeave guards\n    return runGuardQueue(guards).then(() => {\n      // check global guards beforeEach\n      guards = [];\n      for (const guard of beforeGuards.list()) {\n        guards.push(guardToPromiseFn(guard, to, from));\n      }\n      guards.push(canceledNavigationCheck);\n      return runGuardQueue(guards);\n    }).then(() => {\n      // check in components beforeRouteUpdate\n      guards = extractComponentsGuards(updatingRecords, 'beforeRouteUpdate', to, from);\n      for (const record of updatingRecords) {\n        for (const guard of record.updateGuards) {\n          guards.push(guardToPromiseFn(guard, to, from));\n        }\n      }\n      guards.push(canceledNavigationCheck);\n      // run the queue of per route beforeEnter guards\n      return runGuardQueue(guards);\n    }).then(() => {\n      // check the route beforeEnter\n      guards = [];\n      for (const record of to.matched) {\n        // do not trigger beforeEnter on reused views\n        if (record.beforeEnter && from.matched.indexOf(record) < 0) {\n          if (Array.isArray(record.beforeEnter)) {\n            for (const beforeEnter of record.beforeEnter) guards.push(guardToPromiseFn(beforeEnter, to, from));\n          } else {\n            guards.push(guardToPromiseFn(record.beforeEnter, to, from));\n          }\n        }\n      }\n      guards.push(canceledNavigationCheck);\n      // run the queue of per route beforeEnter guards\n      return runGuardQueue(guards);\n    }).then(() => {\n      // NOTE: at this point to.matched is normalized and does not contain any () => Promise<Component>\n      // clear existing enterCallbacks, these are added by extractComponentsGuards\n      to.matched.forEach(record => record.enterCallbacks = {});\n      // check in-component beforeRouteEnter\n      guards = extractComponentsGuards(enteringRecords, 'beforeRouteEnter', to, from);\n      guards.push(canceledNavigationCheck);\n      // run the queue of per route beforeEnter guards\n      return runGuardQueue(guards);\n    }).then(() => {\n      // check global guards beforeResolve\n      guards = [];\n      for (const guard of beforeResolveGuards.list()) {\n        guards.push(guardToPromiseFn(guard, to, from));\n      }\n      guards.push(canceledNavigationCheck);\n      return runGuardQueue(guards);\n    })\n    // catch any navigation canceled\n    .catch(err => isNavigationFailure(err, 8 /* NAVIGATION_CANCELLED */) ? err : Promise.reject(err));\n  }\n  function triggerAfterEach(to, from, failure) {\n    // navigation is confirmed, call afterGuards\n    // TODO: wrap with error handlers\n    for (const guard of afterGuards.list()) guard(to, from, failure);\n  }\n  /**\r\n   * - Cleans up any navigation guards\r\n   * - Changes the url if necessary\r\n   * - Calls the scrollBehavior\r\n   */\n  function finalizeNavigation(toLocation, from, isPush, replace, data) {\n    // a more recent navigation took place\n    const error = checkCanceledNavigation(toLocation, from);\n    if (error) return error;\n    // only consider as push if it's not the first navigation\n    const isFirstNavigation = from === START_LOCATION_NORMALIZED;\n    const state = !isBrowser ? {} : history.state;\n    // change URL only if the user did a push/replace and if it's not the initial navigation because\n    // it's just reflecting the url\n    if (isPush) {\n      // on the initial navigation, we want to reuse the scroll position from\n      // history state if it exists\n      if (replace || isFirstNavigation) routerHistory.replace(toLocation.fullPath, assign({\n        scroll: isFirstNavigation && state && state.scroll\n      }, data));else routerHistory.push(toLocation.fullPath, data);\n    }\n    // accept current navigation\n    currentRoute.value = toLocation;\n    handleScroll(toLocation, from, isPush, isFirstNavigation);\n    markAsReady();\n  }\n  let removeHistoryListener;\n  // attach listener to history to trigger navigations\n  function setupListeners() {\n    removeHistoryListener = routerHistory.listen((to, _from, info) => {\n      // cannot be a redirect route because it was in history\n      const toLocation = resolve(to);\n      pendingLocation = toLocation;\n      const from = currentRoute.value;\n      // TODO: should be moved to web history?\n      if (isBrowser) {\n        saveScrollPosition(getScrollKey(from.fullPath, info.delta), computeScrollPosition());\n      }\n      navigate(toLocation, from).catch(error => {\n        if (isNavigationFailure(error, 4 /* NAVIGATION_ABORTED */ | 8 /* NAVIGATION_CANCELLED */)) {\n          return error;\n        }\n        if (isNavigationFailure(error, 2 /* NAVIGATION_GUARD_REDIRECT */)) {\n          // do not restore history on unknown direction\n          if (info.delta) routerHistory.go(-info.delta, false);\n          // the error is already handled by router.push we just want to avoid\n          // logging the error\n          pushWithRedirect(error.to, toLocation\n          // avoid an uncaught rejection\n          ).catch(noop);\n          // avoid the then branch\n          return Promise.reject();\n        }\n        // do not restore history on unknown direction\n        if (info.delta) routerHistory.go(-info.delta, false);\n        // unrecognized error, transfer to the global handler\n        return triggerError(error);\n      }).then(failure => {\n        failure = failure || finalizeNavigation(\n        // after navigation, all matched components are resolved\n        toLocation, from, false);\n        // revert the navigation\n        if (failure && info.delta) routerHistory.go(-info.delta, false);\n        triggerAfterEach(toLocation, from, failure);\n      }).catch(noop);\n    });\n  }\n  // Initialization and Errors\n  let readyHandlers = useCallbacks();\n  let errorHandlers = useCallbacks();\n  let ready;\n  /**\r\n   * Trigger errorHandlers added via onError and throws the error as well\r\n   * @param error - error to throw\r\n   * @returns the error as a rejected promise\r\n   */\n  function triggerError(error) {\n    markAsReady(error);\n    errorHandlers.list().forEach(handler => handler(error));\n    return Promise.reject(error);\n  }\n  function isReady() {\n    if (ready && currentRoute.value !== START_LOCATION_NORMALIZED) return Promise.resolve();\n    return new Promise((resolve, reject) => {\n      readyHandlers.add([resolve, reject]);\n    });\n  }\n  /**\r\n   * Mark the router as ready, resolving the promised returned by isReady(). Can\r\n   * only be called once, otherwise does nothing.\r\n   * @param err - optional error\r\n   */\n  function markAsReady(err) {\n    if (ready) return;\n    ready = true;\n    setupListeners();\n    readyHandlers.list().forEach(([resolve, reject]) => err ? reject(err) : resolve());\n    readyHandlers.reset();\n  }\n  // Scroll behavior\n  function handleScroll(to, from, isPush, isFirstNavigation) {\n    if (!isBrowser || !scrollBehavior) return Promise.resolve();\n    let scrollPosition = !isPush && getSavedScrollPosition(getScrollKey(to.fullPath, 0)) || (isFirstNavigation || !isPush) && history.state && history.state.scroll || null;\n    return nextTick().then(() => scrollBehavior(to, from, scrollPosition)).then(position => position && scrollToPosition(position)).catch(triggerError);\n  }\n  const go = delta => routerHistory.go(delta);\n  let started;\n  const installedApps = new Set();\n  const router = {\n    currentRoute,\n    addRoute,\n    removeRoute,\n    hasRoute,\n    getRoutes,\n    resolve,\n    options,\n    push,\n    replace,\n    go,\n    back: () => go(-1),\n    forward: () => go(1),\n    beforeEach: beforeGuards.add,\n    beforeResolve: beforeResolveGuards.add,\n    afterEach: afterGuards.add,\n    onError: errorHandlers.add,\n    isReady,\n    install(app) {\n      const router = this;\n      app.component('RouterLink', RouterLink);\n      app.component('RouterView', RouterView);\n      app.config.globalProperties.$router = router;\n      Object.defineProperty(app.config.globalProperties, '$route', {\n        get: () => unref(currentRoute)\n      });\n      // this initial navigation is only necessary on client, on server it doesn't\n      // make sense because it will create an extra unnecessary navigation and could\n      // lead to problems\n      if (isBrowser &&\n      // used for the initial navigation client side to avoid pushing\n      // multiple times when the router is used in multiple apps\n      !started && currentRoute.value === START_LOCATION_NORMALIZED) {\n        // see above\n        started = true;\n        push(routerHistory.location).catch(err => {\n          if (process.env.NODE_ENV !== 'production') warn('Unexpected error when starting the router:', err);\n        });\n      }\n      const reactiveRoute = {};\n      for (let key in START_LOCATION_NORMALIZED) {\n        // @ts-ignore: the key matches\n        reactiveRoute[key] = computed(() => currentRoute.value[key]);\n      }\n      app.provide(routerKey, router);\n      app.provide(routeLocationKey, reactive(reactiveRoute));\n      let unmountApp = app.unmount;\n      installedApps.add(app);\n      app.unmount = function () {\n        installedApps.delete(app);\n        if (installedApps.size < 1) {\n          removeHistoryListener();\n          currentRoute.value = START_LOCATION_NORMALIZED;\n          started = false;\n          ready = false;\n        }\n        unmountApp.call(this, arguments);\n      };\n    }\n  };\n  return router;\n}\nfunction runGuardQueue(guards) {\n  return guards.reduce((promise, guard) => promise.then(() => guard()), Promise.resolve());\n}\nfunction extractChangingRecords(to, from) {\n  const leavingRecords = [];\n  const updatingRecords = [];\n  const enteringRecords = [];\n  const len = Math.max(from.matched.length, to.matched.length);\n  for (let i = 0; i < len; i++) {\n    const recordFrom = from.matched[i];\n    if (recordFrom) {\n      if (to.matched.indexOf(recordFrom) < 0) leavingRecords.push(recordFrom);else updatingRecords.push(recordFrom);\n    }\n    const recordTo = to.matched[i];\n    if (recordTo) {\n      // the type doesn't matter because we are comparing per reference\n      if (from.matched.indexOf(recordTo) < 0) enteringRecords.push(recordTo);\n    }\n  }\n  return [leavingRecords, updatingRecords, enteringRecords];\n}\n\n/**\r\n * Returns the router instance. Equivalent to using `$router` inside\r\n * templates.\r\n */\nfunction useRouter() {\n  return inject(routerKey);\n}\n/**\r\n * Returns the current route location. Equivalent to using `$route` inside\r\n * templates.\r\n */\nfunction useRoute() {\n  return inject(routeLocationKey);\n}\nexport { NavigationFailureType, RouterLink, RouterView, START_LOCATION_NORMALIZED as START_LOCATION, createMemoryHistory, createRouter, createRouterMatcher, createWebHashHistory, createWebHistory, isNavigationFailure, onBeforeRouteLeave, onBeforeRouteUpdate, parseQuery, stringifyQuery, useLink, useRoute, useRouter };","map":{"version":3,"names":["getCurrentInstance","warn","warn$1","inject","onUnmounted","onDeactivated","onActivated","computed","unref","defineComponent","reactive","h","provide","ref","watch","shallowRef","nextTick","hasSymbol","Symbol","toStringTag","PolySymbol","name","process","env","NODE_ENV","matchedRouteKey","viewDepthKey","routerKey","routeLocationKey","isBrowser","window","isESModule","obj","__esModule","assign","Object","applyToParams","fn","params","newParams","key","value","Array","isArray","map","noop","msg","args","from","arguments","slice","console","apply","concat","TRAILING_SLASH_RE","removeTrailingSlash","path","replace","parseURL","parseQuery","location","currentLocation","query","searchString","hash","searchPos","indexOf","hashPos","length","resolveRelativePath","fullPath","stringifyURL","stringifyQuery","stripBase","pathname","base","toLowerCase","isSameRouteLocation","a","b","aLastIndex","matched","bLastIndex","isSameRouteRecord","isSameRouteLocationParams","aliasOf","keys","isSameRouteLocationParamsValue","isEquivalentArray","every","i","to","startsWith","fromSegments","split","toSegments","position","toPosition","segment","join","NavigationType","NavigationDirection","START","normalizeBase","baseEl","document","querySelector","getAttribute","BEFORE_HASH_RE","createHref","getElementPosition","el","offset","docRect","documentElement","getBoundingClientRect","elRect","behavior","left","top","computeScrollPosition","pageXOffset","pageYOffset","scrollToPosition","scrollToOptions","positionEl","isIdSelector","getElementById","foundEl","err","style","scrollTo","getScrollKey","delta","history","state","scrollPositions","Map","saveScrollPosition","scrollPosition","set","getSavedScrollPosition","scroll","get","delete","createBaseLocation","protocol","host","createCurrentLocation","search","pathFromHash","useHistoryListeners","historyState","listeners","teardowns","pauseState","popStateHandler","fromState","forEach","listener","type","pop","direction","forward","back","unknown","pauseListeners","listen","callback","push","teardown","index","splice","beforeUnloadListener","replaceState","destroy","removeEventListener","addEventListener","buildState","current","replaced","computeScroll","useHistoryStateNavigation","changeLocation","hashIndex","url","error","data","currentState","createWebHistory","historyNavigation","historyListeners","go","triggerListeners","routerHistory","bind","defineProperty","createMemoryHistory","queue","setLocation","info","shouldTrigger","Math","max","min","createWebHashHistory","endsWith","isRouteLocation","route","isRouteName","START_LOCATION_NORMALIZED","undefined","meta","redirectedFrom","NavigationFailureSymbol","NavigationFailureType","ErrorTypeMessages","JSON","stringify","stringifyRoute","createRouterError","Error","isNavigationFailure","propertiesToLog","BASE_PARAM_PATTERN","BASE_PATH_PARSER_OPTIONS","sensitive","strict","start","end","REGEX_CHARS_RE","tokensToParser","segments","extraOptions","options","score","pattern","segmentScores","tokenIndex","token","subSegmentScore","repeatable","optional","regexp","re","RegExp","message","subPattern","parse","match","avoidDuplicatedSlash","param","text","compareScoreArray","diff","comparePathParserScore","aScore","bScore","comp","ROOT_TOKEN","VALID_PARAM_RE","tokenizePath","crash","buffer","previousState","tokens","finalizeSegment","char","customRe","consumeBuffer","addCharToBuffer","test","createRouteRecordMatcher","record","parent","parser","existingKeys","Set","has","add","matcher","children","alias","createRouterMatcher","routes","globalOptions","matchers","matcherMap","mergeOptions","getRecordMatcher","addRoute","originalRecord","isRootAdd","mainNormalizedRecord","normalizeRouteRecord","normalizedRecords","aliases","components","originalMatcher","normalizedRecord","parentPath","connectingSlash","checkMissingParamsInAbsolutePath","checkSameParams","isAliasRecord","removeRoute","insertMatcher","matcherRef","getRoutes","resolve","paramsFromLocation","filter","k","find","m","parentMatcher","unshift","mergeMetaFields","redirect","beforeEnter","props","normalizeRecordProps","instances","leaveGuards","updateGuards","enterCallbacks","default","component","propsObject","reduce","defaults","partialOptions","isSameParam","HASH_RE","AMPERSAND_RE","SLASH_RE","EQUAL_RE","IM_RE","ENC_BRACKET_OPEN_RE","ENC_BRACKET_CLOSE_RE","ENC_CARET_RE","ENC_BACKTICK_RE","ENC_CURLY_OPEN_RE","ENC_PIPE_RE","ENC_CURLY_CLOSE_RE","commonEncode","encodeURI","encodeHash","encodeQueryValue","encodeQueryKey","encodePath","encodeParam","decode","decodeURIComponent","hasLeadingIM","searchParams","searchParam","eqPos","currentValue","values","v","normalizeQuery","normalizedQuery","useCallbacks","handlers","handler","reset","list","registerGuard","guard","removeFromList","onBeforeRouteLeave","leaveGuard","activeRecord","onBeforeRouteUpdate","updateGuard","guardToPromiseFn","enterCallbackArray","Promise","reject","next","valid","guardReturn","call","canOnlyBeCalledOnce","guardCall","then","toString","resolvedValue","_called","catch","called","extractComponentsGuards","guardType","guards","rawComponent","promise","isRouteComponent","__vccOpts","componentPromise","resolved","resolvedComponent","useLink","router","currentRoute","activeRecordIndex","routeMatched","currentMatched","findIndex","parentRecordPath","getOriginalPath","isActive","includesParams","isExactActive","navigate","e","guardEvent","href","RouterLinkImpl","String","required","activeClass","exactActiveClass","custom","Boolean","ariaCurrentValue","setup","slots","attrs","link","elClass","getLinkClass","linkActiveClass","linkExactActiveClass","onClick","class","RouterLink","metaKey","altKey","ctrlKey","shiftKey","defaultPrevented","button","currentTarget","target","preventDefault","outer","inner","innerValue","outerValue","some","propClass","globalClass","defaultClass","RouterViewImpl","warnDeprecatedUsage","injectedRoute","depth","matchedRouteRef","viewRef","instance","oldInstance","oldName","flush","matchedRoute","ViewComponent","currentName","Component","routePropsOption","routeProps","onVnodeUnmounted","vnode","isUnmounted","RouterView","parentName","includes","createRouter","parseQuery$1","stringifyQuery$1","scrollBehavior","beforeGuards","beforeResolveGuards","afterGuards","pendingLocation","scrollRestoration","normalizeParams","paramValue","encodeParams","decodeParams","parentOrRoute","recordMatcher","routeMatcher","hasRoute","rawLocation","locationNormalized","matcherLocation","locationAsObject","checkCanceledNavigation","pushWithRedirect","targetLocation","force","lastMatched","newTargetLocation","toLocation","failure","handleScroll","triggerError","_count","finalizeNavigation","triggerAfterEach","checkCanceledNavigationAndReject","leavingRecords","updatingRecords","enteringRecords","extractChangingRecords","reverse","canceledNavigationCheck","runGuardQueue","isPush","isFirstNavigation","markAsReady","removeHistoryListener","setupListeners","_from","readyHandlers","errorHandlers","ready","isReady","started","installedApps","beforeEach","beforeResolve","afterEach","onError","install","app","config","globalProperties","$router","reactiveRoute","unmountApp","unmount","size","len","recordFrom","recordTo","useRouter","useRoute","START_LOCATION"],"sources":["F:/myvue1/elmclient/elmclient/node_modules/vue-router/dist/vue-router.esm-bundler.js"],"sourcesContent":["/*!\n  * vue-router v4.0.0-beta.13\n  * (c) 2020 Eduardo San Martin Morote\n  * @license MIT\n  */\nimport { getCurrentInstance, warn as warn$1, inject, onUnmounted, onDeactivated, onActivated, computed, unref, defineComponent, reactive, h, provide, ref, watch, shallowRef, nextTick } from 'vue';\n\nconst hasSymbol = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';\r\nconst PolySymbol = (name) => \r\n// vr = vue router\r\nhasSymbol\r\n    ? Symbol((process.env.NODE_ENV !== 'production') ? '[vue-router]: ' + name : name)\r\n    : ((process.env.NODE_ENV !== 'production') ? '[vue-router]: ' : '_vr_') + name;\r\n// rvlm = Router View Location Matched\r\nconst matchedRouteKey = PolySymbol((process.env.NODE_ENV !== 'production') ? 'router view location matched' : 'rvlm');\r\n// rvd = Router View Depth\r\nconst viewDepthKey = PolySymbol((process.env.NODE_ENV !== 'production') ? 'router view depth' : 'rvd');\r\n// r = router\r\nconst routerKey = PolySymbol((process.env.NODE_ENV !== 'production') ? 'router' : 'r');\r\n// rt = route location\r\nconst routeLocationKey = PolySymbol((process.env.NODE_ENV !== 'production') ? 'route location' : 'rl');\n\nconst isBrowser = typeof window !== 'undefined';\n\nfunction isESModule(obj) {\r\n    return obj.__esModule || (hasSymbol && obj[Symbol.toStringTag] === 'Module');\r\n}\r\nconst assign = Object.assign;\r\nfunction applyToParams(fn, params) {\r\n    const newParams = {};\r\n    for (const key in params) {\r\n        const value = params[key];\r\n        newParams[key] = Array.isArray(value) ? value.map(fn) : fn(value);\r\n    }\r\n    return newParams;\r\n}\r\nlet noop = () => { };\n\nfunction warn(msg) {\r\n    // avoid using ...args as it breaks in older Edge builds\r\n    const args = Array.from(arguments).slice(1);\r\n    console.warn.apply(console, ['[Vue Router warn]: ' + msg].concat(args));\r\n}\n\nconst TRAILING_SLASH_RE = /\\/$/;\r\nconst removeTrailingSlash = (path) => path.replace(TRAILING_SLASH_RE, '');\r\n/**\r\n * Transforms an URI into a normalized history location\r\n *\r\n * @param parseQuery\r\n * @param location - URI to normalize\r\n * @param currentLocation - current absolute location. Allows resolving relative\r\n * paths. Must start with `/`. Defaults to `/`\r\n * @returns a normalized history location\r\n */\r\nfunction parseURL(parseQuery, location, currentLocation = '/') {\r\n    let path, query = {}, searchString = '', hash = '';\r\n    // Could use URL and URLSearchParams but IE 11 doesn't support it\r\n    const searchPos = location.indexOf('?');\r\n    const hashPos = location.indexOf('#', searchPos > -1 ? searchPos : 0);\r\n    if (searchPos > -1) {\r\n        path = location.slice(0, searchPos);\r\n        searchString = location.slice(searchPos + 1, hashPos > -1 ? hashPos : location.length);\r\n        query = parseQuery(searchString);\r\n    }\r\n    if (hashPos > -1) {\r\n        path = path || location.slice(0, hashPos);\r\n        // keep the # character\r\n        hash = location.slice(hashPos, location.length);\r\n    }\r\n    // no search and no query\r\n    path = resolveRelativePath(path != null ? path : location, currentLocation);\r\n    // empty path means a relative query or hash `?foo=f`, `#thing`\r\n    return {\r\n        fullPath: path + (searchString && '?') + searchString + hash,\r\n        path,\r\n        query,\r\n        hash,\r\n    };\r\n}\r\n/**\r\n * Stringifies a URL object\r\n *\r\n * @param stringifyQuery\r\n * @param location\r\n */\r\nfunction stringifyURL(stringifyQuery, location) {\r\n    let query = location.query ? stringifyQuery(location.query) : '';\r\n    return location.path + (query && '?') + query + (location.hash || '');\r\n}\r\n/**\r\n * Strips off the base from the beginning of a location.pathname in a non\r\n * case-sensitive way.\r\n *\r\n * @param pathname - location.pathname\r\n * @param base - base to strip off\r\n */\r\nfunction stripBase(pathname, base) {\r\n    // no base or base is not found at the beginning\r\n    if (!base || pathname.toLowerCase().indexOf(base.toLowerCase()))\r\n        return pathname;\r\n    return pathname.slice(base.length) || '/';\r\n}\r\n/**\r\n * Checks if two RouteLocation are equal. This means that both locations are\r\n * pointing towards the same {@link RouteRecord} and that all `params`, `query`\r\n * parameters and `hash` are the same\r\n *\r\n * @param a - first {@link RouteLocation}\r\n * @param b - second {@link RouteLocation}\r\n */\r\nfunction isSameRouteLocation(stringifyQuery, a, b) {\r\n    let aLastIndex = a.matched.length - 1;\r\n    let bLastIndex = b.matched.length - 1;\r\n    return (aLastIndex > -1 &&\r\n        aLastIndex === bLastIndex &&\r\n        isSameRouteRecord(a.matched[aLastIndex], b.matched[bLastIndex]) &&\r\n        isSameRouteLocationParams(a.params, b.params) &&\r\n        stringifyQuery(a.query) === stringifyQuery(b.query) &&\r\n        a.hash === b.hash);\r\n}\r\n/**\r\n * Check if two `RouteRecords` are equal. Takes into account aliases: they are\r\n * considered equal to the `RouteRecord` they are aliasing.\r\n *\r\n * @param a - first {@link RouteRecord}\r\n * @param b - second {@link RouteRecord}\r\n */\r\nfunction isSameRouteRecord(a, b) {\r\n    // since the original record has an undefined value for aliasOf\r\n    // but all aliases point to the original record, this will always compare\r\n    // the original record\r\n    return (a.aliasOf || a) === (b.aliasOf || b);\r\n}\r\nfunction isSameRouteLocationParams(a, b) {\r\n    if (Object.keys(a).length !== Object.keys(b).length)\r\n        return false;\r\n    for (let key in a) {\r\n        if (!isSameRouteLocationParamsValue(a[key], b[key]))\r\n            return false;\r\n    }\r\n    return true;\r\n}\r\nfunction isSameRouteLocationParamsValue(a, b) {\r\n    return Array.isArray(a)\r\n        ? isEquivalentArray(a, b)\r\n        : Array.isArray(b)\r\n            ? isEquivalentArray(b, a)\r\n            : a === b;\r\n}\r\n/**\r\n * Check if two arrays are the same or if an array with one single entry is the\r\n * same as another primitive value. Used to check query and parameters\r\n *\r\n * @param a - array of values\r\n * @param b - array of values or a single value\r\n */\r\nfunction isEquivalentArray(a, b) {\r\n    return Array.isArray(b)\r\n        ? a.length === b.length && a.every((value, i) => value === b[i])\r\n        : a.length === 1 && a[0] === b;\r\n}\r\n/**\r\n * Resolves a relative path that starts with `.`.\r\n *\r\n * @param to - path location we are resolving\r\n * @param from - currentLocation.path, should start with `/`\r\n */\r\nfunction resolveRelativePath(to, from) {\r\n    if (to.startsWith('/'))\r\n        return to;\r\n    if ((process.env.NODE_ENV !== 'production') && !from.startsWith('/')) {\r\n        warn(`Cannot resolve a relative location without an absolute path. Trying to resolve \"${to}\" from \"${from}\". It should look like \"/${from}\".`);\r\n        return to;\r\n    }\r\n    if (!to)\r\n        return from;\r\n    const fromSegments = from.split('/');\r\n    const toSegments = to.split('/');\r\n    let position = fromSegments.length - 1;\r\n    let toPosition;\r\n    let segment;\r\n    for (toPosition = 0; toPosition < toSegments.length; toPosition++) {\r\n        segment = toSegments[toPosition];\r\n        // can't go below zero\r\n        if (position === 1 || segment === '.')\r\n            continue;\r\n        if (segment === '..')\r\n            position--;\r\n        // found something that is not relative path\r\n        else\r\n            break;\r\n    }\r\n    return (fromSegments.slice(0, position).join('/') +\r\n        '/' +\r\n        toSegments\r\n            .slice(toPosition - (toPosition === toSegments.length ? 1 : 0))\r\n            .join('/'));\r\n}\n\nvar NavigationType;\r\n(function (NavigationType) {\r\n    NavigationType[\"pop\"] = \"pop\";\r\n    NavigationType[\"push\"] = \"push\";\r\n})(NavigationType || (NavigationType = {}));\r\nvar NavigationDirection;\r\n(function (NavigationDirection) {\r\n    NavigationDirection[\"back\"] = \"back\";\r\n    NavigationDirection[\"forward\"] = \"forward\";\r\n    NavigationDirection[\"unknown\"] = \"\";\r\n})(NavigationDirection || (NavigationDirection = {}));\r\n/**\r\n * Starting location for Histories\r\n */\r\nconst START = '';\r\n// Generic utils\r\n/**\r\n * Normalizes a base by removing any trailing slash and reading the base tag if\r\n * present.\r\n *\r\n * @param base - base to normalize\r\n */\r\nfunction normalizeBase(base) {\r\n    if (!base) {\r\n        if (isBrowser) {\r\n            // respect <base> tag\r\n            const baseEl = document.querySelector('base');\r\n            base = (baseEl && baseEl.getAttribute('href')) || '/';\r\n            // strip full URL origin\r\n            base = base.replace(/^\\w+:\\/\\/[^\\/]+/, '');\r\n        }\r\n        else {\r\n            base = '/';\r\n        }\r\n    }\r\n    // ensure leading slash when it was removed by the regex above avoid leading\r\n    // slash with hash because the file could be read from the disk like file://\r\n    // and the leading slash would cause problems\r\n    if (base[0] !== '/' && base[0] !== '#')\r\n        base = '/' + base;\r\n    // remove the trailing slash so all other method can just do `base + fullPath`\r\n    // to build an href\r\n    return removeTrailingSlash(base);\r\n}\r\n// remove any character before the hash\r\nconst BEFORE_HASH_RE = /^[^#]+#/;\r\nfunction createHref(base, location) {\r\n    return base.replace(BEFORE_HASH_RE, '#') + location;\r\n}\n\nfunction getElementPosition(el, offset) {\r\n    const docRect = document.documentElement.getBoundingClientRect();\r\n    const elRect = el.getBoundingClientRect();\r\n    return {\r\n        behavior: offset.behavior,\r\n        left: elRect.left - docRect.left - (offset.left || 0),\r\n        top: elRect.top - docRect.top - (offset.top || 0),\r\n    };\r\n}\r\nconst computeScrollPosition = () => ({\r\n    left: window.pageXOffset,\r\n    top: window.pageYOffset,\r\n});\r\nfunction scrollToPosition(position) {\r\n    let scrollToOptions;\r\n    if ('el' in position) {\r\n        let positionEl = position.el;\r\n        const isIdSelector = typeof positionEl === 'string' && positionEl.startsWith('#');\r\n        /**\r\n         * `id`s can accept pretty much any characters, including CSS combinators\r\n         * like `>` or `~`. It's still possible to retrieve elements using\r\n         * `document.getElementById('~')` but it needs to be escaped when using\r\n         * `document.querySelector('#\\\\~')` for it to be valid. The only\r\n         * requirements for `id`s are them to be unique on the page and to not be\r\n         * empty (`id=\"\"`). Because of that, when passing an id selector, it should\r\n         * be properly escaped for it to work with `querySelector`. We could check\r\n         * for the id selector to be simple (no CSS combinators `+ >~`) but that\r\n         * would make things inconsistent since they are valid characters for an\r\n         * `id` but would need to be escaped when using `querySelector`, breaking\r\n         * their usage and ending up in no selector returned. Selectors need to be\r\n         * escaped:\r\n         *\r\n         * - `#1-thing` becomes `#\\31 -thing`\r\n         * - `#with~symbols` becomes `#with\\\\~symbols`\r\n         *\r\n         * - More information about  the topic can be found at\r\n         *   https://mathiasbynens.be/notes/html5-id-class.\r\n         * - Practical example: https://mathiasbynens.be/demo/html5-id\r\n         */\r\n        if ((process.env.NODE_ENV !== 'production') && typeof position.el === 'string') {\r\n            if (!isIdSelector || !document.getElementById(position.el.slice(1))) {\r\n                try {\r\n                    let foundEl = document.querySelector(position.el);\r\n                    if (isIdSelector && foundEl) {\r\n                        warn(`The selector \"${position.el}\" should be passed as \"el: document.querySelector('${position.el}')\" because it starts with \"#\".`);\r\n                        // return to avoid other warnings\r\n                        return;\r\n                    }\r\n                }\r\n                catch (err) {\r\n                    warn(`The selector \"${position.el}\" is invalid. If you are using an id selector, make sure to escape it. You can find more information about escaping characters in selectors at https://mathiasbynens.be/notes/css-escapes or use CSS.escape (https://developer.mozilla.org/en-US/docs/Web/API/CSS/escape).`);\r\n                    // return to avoid other warnings\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        const el = typeof positionEl === 'string'\r\n            ? isIdSelector\r\n                ? document.getElementById(positionEl.slice(1))\r\n                : document.querySelector(positionEl)\r\n            : positionEl;\r\n        if (!el) {\r\n            (process.env.NODE_ENV !== 'production') &&\r\n                warn(`Couldn't find element using selector \"${position.el}\" returned by scrollBehavior.`);\r\n            return;\r\n        }\r\n        scrollToOptions = getElementPosition(el, position);\r\n    }\r\n    else {\r\n        scrollToOptions = position;\r\n    }\r\n    if ('scrollBehavior' in document.documentElement.style)\r\n        window.scrollTo(scrollToOptions);\r\n    else {\r\n        window.scrollTo(scrollToOptions.left != null ? scrollToOptions.left : window.pageXOffset, scrollToOptions.top != null ? scrollToOptions.top : window.pageYOffset);\r\n    }\r\n}\r\nfunction getScrollKey(path, delta) {\r\n    const position = history.state ? history.state.position - delta : -1;\r\n    return position + path;\r\n}\r\nconst scrollPositions = new Map();\r\nfunction saveScrollPosition(key, scrollPosition) {\r\n    scrollPositions.set(key, scrollPosition);\r\n}\r\nfunction getSavedScrollPosition(key) {\r\n    const scroll = scrollPositions.get(key);\r\n    // consume it so it's not used again\r\n    scrollPositions.delete(key);\r\n    return scroll;\r\n}\r\n// TODO: RFC about how to save scroll position\r\n/**\r\n * ScrollBehavior instance used by the router to compute and restore the scroll\r\n * position when navigating.\r\n */\r\n// export interface ScrollHandler<ScrollPositionEntry extends HistoryStateValue, ScrollPosition extends ScrollPositionEntry> {\r\n//   // returns a scroll position that can be saved in history\r\n//   compute(): ScrollPositionEntry\r\n//   // can take an extended ScrollPositionEntry\r\n//   scroll(position: ScrollPosition): void\r\n// }\r\n// export const scrollHandler: ScrollHandler<ScrollPosition> = {\r\n//   compute: computeScroll,\r\n//   scroll: scrollToPosition,\r\n// }\n\nlet createBaseLocation = () => location.protocol + '//' + location.host;\r\n/**\r\n * Creates a normalized history location from a window.location object\r\n * @param location -\r\n */\r\nfunction createCurrentLocation(base, location) {\r\n    const { pathname, search, hash } = location;\r\n    // allows hash based url\r\n    const hashPos = base.indexOf('#');\r\n    if (hashPos > -1) {\r\n        // prepend the starting slash to hash so the url starts with /#\r\n        let pathFromHash = hash.slice(1);\r\n        if (pathFromHash[0] !== '/')\r\n            pathFromHash = '/' + pathFromHash;\r\n        return stripBase(pathFromHash, '');\r\n    }\r\n    const path = stripBase(pathname, base);\r\n    return path + search + hash;\r\n}\r\nfunction useHistoryListeners(base, historyState, currentLocation, replace) {\r\n    let listeners = [];\r\n    let teardowns = [];\r\n    // TODO: should it be a stack? a Dict. Check if the popstate listener\r\n    // can trigger twice\r\n    let pauseState = null;\r\n    const popStateHandler = ({ state, }) => {\r\n        const to = createCurrentLocation(base, location);\r\n        const from = currentLocation.value;\r\n        const fromState = historyState.value;\r\n        let delta = 0;\r\n        if (state) {\r\n            currentLocation.value = to;\r\n            historyState.value = state;\r\n            // ignore the popstate and reset the pauseState\r\n            if (pauseState && pauseState === from) {\r\n                pauseState = null;\r\n                return;\r\n            }\r\n            delta = fromState ? state.position - fromState.position : 0;\r\n        }\r\n        else {\r\n            replace(to);\r\n        }\r\n        // console.log({ deltaFromCurrent })\r\n        // Here we could also revert the navigation by calling history.go(-delta)\r\n        // this listener will have to be adapted to not trigger again and to wait for the url\r\n        // to be updated before triggering the listeners. Some kind of validation function would also\r\n        // need to be passed to the listeners so the navigation can be accepted\r\n        // call all listeners\r\n        listeners.forEach(listener => {\r\n            listener(currentLocation.value, from, {\r\n                delta,\r\n                type: NavigationType.pop,\r\n                direction: delta\r\n                    ? delta > 0\r\n                        ? NavigationDirection.forward\r\n                        : NavigationDirection.back\r\n                    : NavigationDirection.unknown,\r\n            });\r\n        });\r\n    };\r\n    function pauseListeners() {\r\n        pauseState = currentLocation.value;\r\n    }\r\n    function listen(callback) {\r\n        // setup the listener and prepare teardown callbacks\r\n        listeners.push(callback);\r\n        const teardown = () => {\r\n            const index = listeners.indexOf(callback);\r\n            if (index > -1)\r\n                listeners.splice(index, 1);\r\n        };\r\n        teardowns.push(teardown);\r\n        return teardown;\r\n    }\r\n    function beforeUnloadListener() {\r\n        const { history } = window;\r\n        if (!history.state)\r\n            return;\r\n        history.replaceState(assign({}, history.state, { scroll: computeScrollPosition() }), '');\r\n    }\r\n    function destroy() {\r\n        for (const teardown of teardowns)\r\n            teardown();\r\n        teardowns = [];\r\n        window.removeEventListener('popstate', popStateHandler);\r\n        window.removeEventListener('beforeunload', beforeUnloadListener);\r\n    }\r\n    // setup the listeners and prepare teardown callbacks\r\n    window.addEventListener('popstate', popStateHandler);\r\n    window.addEventListener('beforeunload', beforeUnloadListener);\r\n    return {\r\n        pauseListeners,\r\n        listen,\r\n        destroy,\r\n    };\r\n}\r\n/**\r\n * Creates a state object\r\n */\r\nfunction buildState(back, current, forward, replaced = false, computeScroll = false) {\r\n    return {\r\n        back,\r\n        current,\r\n        forward,\r\n        replaced,\r\n        position: window.history.length,\r\n        scroll: computeScroll ? computeScrollPosition() : null,\r\n    };\r\n}\r\nfunction useHistoryStateNavigation(base) {\r\n    const { history, location } = window;\r\n    // private variables\r\n    let currentLocation = {\r\n        value: createCurrentLocation(base, location),\r\n    };\r\n    let historyState = { value: history.state };\r\n    // build current history entry as this is a fresh navigation\r\n    if (!historyState.value) {\r\n        changeLocation(currentLocation.value, {\r\n            back: null,\r\n            current: currentLocation.value,\r\n            forward: null,\r\n            // the length is off by one, we need to decrease it\r\n            position: history.length - 1,\r\n            replaced: true,\r\n            // don't add a scroll as the user may have an anchor and we want\r\n            // scrollBehavior to be triggered without a saved position\r\n            scroll: null,\r\n        }, true);\r\n    }\r\n    function changeLocation(to, state, replace) {\r\n        // when the base has a `#`, only use that for the URL\r\n        const hashIndex = base.indexOf('#');\r\n        const url = hashIndex > -1\r\n            ? base.slice(hashIndex) + to\r\n            : createBaseLocation() + base + to;\r\n        try {\r\n            // BROWSER QUIRK\r\n            // NOTE: Safari throws a SecurityError when calling this function 100 times in 30 seconds\r\n            history[replace ? 'replaceState' : 'pushState'](state, '', url);\r\n            historyState.value = state;\r\n        }\r\n        catch (err) {\r\n            if ((process.env.NODE_ENV !== 'production')) {\r\n                warn('Error with push/replace State', err);\r\n            }\r\n            else {\r\n                console.error(err);\r\n            }\r\n            // Force the navigation, this also resets the call count\r\n            location[replace ? 'replace' : 'assign'](url);\r\n        }\r\n    }\r\n    function replace(to, data) {\r\n        const state = assign({}, history.state, buildState(historyState.value.back, \r\n        // keep back and forward entries but override current position\r\n        to, historyState.value.forward, true), data, { position: historyState.value.position });\r\n        changeLocation(to, state, true);\r\n        currentLocation.value = to;\r\n    }\r\n    function push(to, data) {\r\n        // Add to current entry the information of where we are going\r\n        // as well as saving the current position\r\n        const currentState = assign({}, \r\n        // use current history state to gracefully handle a wrong call to\r\n        // history.replaceState\r\n        // https://github.com/vuejs/vue-router-next/issues/366\r\n        historyState.value, history.state, {\r\n            forward: to,\r\n            scroll: computeScrollPosition(),\r\n        });\r\n        if ((process.env.NODE_ENV !== 'production') && !history.state) {\r\n            warn(`history.state seems to have been manually replaced without preserving the necessary values. Make sure to preserve existing history state if you are manually calling history.replaceState:\\n\\n` +\r\n                `history.replaceState(history.state, '', url)\\n\\n` +\r\n                `You can find more information at https://next.router.vuejs.org/guide/migration/#usage-of-history-state.`);\r\n        }\r\n        changeLocation(currentState.current, currentState, true);\r\n        const state = assign({}, buildState(currentLocation.value, to, null), { position: currentState.position + 1 }, data);\r\n        changeLocation(to, state, false);\r\n        currentLocation.value = to;\r\n    }\r\n    return {\r\n        location: currentLocation,\r\n        state: historyState,\r\n        push,\r\n        replace,\r\n    };\r\n}\r\n/**\r\n * Creates an HTML5 history. Most common history for single page applications.\r\n *\r\n * @param base -\r\n */\r\nfunction createWebHistory(base) {\r\n    base = normalizeBase(base);\r\n    const historyNavigation = useHistoryStateNavigation(base);\r\n    const historyListeners = useHistoryListeners(base, historyNavigation.state, historyNavigation.location, historyNavigation.replace);\r\n    function go(delta, triggerListeners = true) {\r\n        if (!triggerListeners)\r\n            historyListeners.pauseListeners();\r\n        history.go(delta);\r\n    }\r\n    const routerHistory = assign({\r\n        // it's overridden right after\r\n        location: '',\r\n        base,\r\n        go,\r\n        createHref: createHref.bind(null, base),\r\n    }, historyNavigation, historyListeners);\r\n    Object.defineProperty(routerHistory, 'location', {\r\n        get: () => historyNavigation.location.value,\r\n    });\r\n    Object.defineProperty(routerHistory, 'state', {\r\n        get: () => historyNavigation.state.value,\r\n    });\r\n    return routerHistory;\r\n}\n\n/**\r\n * Creates a in-memory based history. The main purpose of this history is to handle SSR. It starts in a special location that is nowhere.\r\n * It's up to the user to replace that location with the starter location by either calling `router.push` or `router.replace`.\r\n *\r\n * @param base - Base applied to all urls, defaults to '/'\r\n * @returns a history object that can be passed to the router constructor\r\n */\r\nfunction createMemoryHistory(base = '') {\r\n    let listeners = [];\r\n    let queue = [START];\r\n    let position = 0;\r\n    function setLocation(location) {\r\n        position++;\r\n        if (position === queue.length) {\r\n            // we are at the end, we can simply append a new entry\r\n            queue.push(location);\r\n        }\r\n        else {\r\n            // we are in the middle, we remove everything from here in the queue\r\n            queue.splice(position);\r\n            queue.push(location);\r\n        }\r\n    }\r\n    function triggerListeners(to, from, { direction, delta }) {\r\n        const info = {\r\n            direction,\r\n            delta,\r\n            type: NavigationType.pop,\r\n        };\r\n        for (let callback of listeners) {\r\n            callback(to, from, info);\r\n        }\r\n    }\r\n    const routerHistory = {\r\n        // rewritten by Object.defineProperty\r\n        location: START,\r\n        state: {},\r\n        base,\r\n        createHref: createHref.bind(null, base),\r\n        replace(to) {\r\n            // remove current entry and decrement position\r\n            queue.splice(position--, 1);\r\n            setLocation(to);\r\n        },\r\n        push(to, data) {\r\n            setLocation(to);\r\n        },\r\n        listen(callback) {\r\n            listeners.push(callback);\r\n            return () => {\r\n                const index = listeners.indexOf(callback);\r\n                if (index > -1)\r\n                    listeners.splice(index, 1);\r\n            };\r\n        },\r\n        destroy() {\r\n            listeners = [];\r\n        },\r\n        go(delta, shouldTrigger = true) {\r\n            const from = this.location;\r\n            const direction = \r\n            // we are considering delta === 0 going forward, but in abstract mode\r\n            // using 0 for the delta doesn't make sense like it does in html5 where\r\n            // it reloads the page\r\n            delta < 0 ? NavigationDirection.back : NavigationDirection.forward;\r\n            position = Math.max(0, Math.min(position + delta, queue.length - 1));\r\n            if (shouldTrigger) {\r\n                triggerListeners(this.location, from, {\r\n                    direction,\r\n                    delta,\r\n                });\r\n            }\r\n        },\r\n    };\r\n    Object.defineProperty(routerHistory, 'location', {\r\n        get: () => queue[position],\r\n    });\r\n    return routerHistory;\r\n}\n\n/**\r\n * Creates a hash history. Useful for web applications with no host (e.g.\r\n * `file://`) or when configuring a server to handle any URL.\r\n *\r\n * @param base - optional base to provide. Defaults to `location.pathname` or\r\n * `/` if at root. If there is a `base` tag in the `head`, its value will be\r\n * **ignored**.\r\n *\r\n * @example\r\n * ```js\r\n * // at https://example.com/folder\r\n * createWebHashHistory() // gives a url of `https://example.com/folder#`\r\n * createWebHashHistory('/folder/') // gives a url of `https://example.com/folder/#`\r\n * // if the `#` is provided in the base, it won't be added by `createWebHashHistory`\r\n * createWebHashHistory('/folder/#/app/') // gives a url of `https://example.com/folder/#/app/`\r\n * // you should avoid doing this because it changes the original url and breaks copying urls\r\n * createWebHashHistory('/other-folder/') // gives a url of `https://example.com/other-folder/#`\r\n *\r\n * // at file:///usr/etc/folder/index.html\r\n * // for locations with no `host`, the base is ignored\r\n * createWebHashHistory('/iAmIgnored') // gives a url of `file:///usr/etc/folder/index.html#`\r\n * ```\r\n */\r\nfunction createWebHashHistory(base) {\r\n    // Make sure this implementation is fine in terms of encoding, specially for IE11\r\n    // for `file://`, directly use the pathname and ignore the base\r\n    // location.pathname contains an initial `/` even at the root: `https://example.com`\r\n    base = location.host ? base || location.pathname : '';\r\n    // allow the user to provide a `#` in the middle: `/base/#/app`\r\n    if (base.indexOf('#') < 0)\r\n        base += '#';\r\n    if ((process.env.NODE_ENV !== 'production') && !base.endsWith('#/') && !base.endsWith('#')) {\r\n        warn(`A hash base must end with a \"#\":\\n\"${base}\" should be \"${base.replace(/#.*$/, '#')}\".`);\r\n    }\r\n    return createWebHistory(base);\r\n}\n\nfunction isRouteLocation(route) {\r\n    return typeof route === 'string' || (route && typeof route === 'object');\r\n}\r\nfunction isRouteName(name) {\r\n    return typeof name === 'string' || typeof name === 'symbol';\r\n}\n\n/**\r\n * Initial route location where the router is. Can be used in navigation guards\r\n * to differentiate the initial navigation.\r\n *\r\n * @example\r\n * ```js\r\n * import { START_LOCATION } from 'vue-router'\r\n *\r\n * router.beforeEach((to, from) => {\r\n *   if (from === START_LOCATION) {\r\n *     // initial navigation\r\n *   }\r\n * })\r\n * ```\r\n */\r\nconst START_LOCATION_NORMALIZED = {\r\n    path: '/',\r\n    name: undefined,\r\n    params: {},\r\n    query: {},\r\n    hash: '',\r\n    fullPath: '/',\r\n    matched: [],\r\n    meta: {},\r\n    redirectedFrom: undefined,\r\n};\n\nconst NavigationFailureSymbol = PolySymbol((process.env.NODE_ENV !== 'production') ? 'navigation failure' : 'nf');\r\n/**\r\n * Enumeration with all possible types for navigation failures. Can be passed to\r\n * {@link isNavigationFailure} to check for specific failures.\r\n */\r\nvar NavigationFailureType;\r\n(function (NavigationFailureType) {\r\n    /**\r\n     * An aborted navigation is a navigation that failed because a navigation\r\n     * guard returned `false` or called `next(false)`\r\n     */\r\n    NavigationFailureType[NavigationFailureType[\"aborted\"] = 4] = \"aborted\";\r\n    /**\r\n     * A cancelled navigation is a navigation that failed because a more recent\r\n     * navigation finished started (not necessarily finished).\r\n     */\r\n    NavigationFailureType[NavigationFailureType[\"cancelled\"] = 8] = \"cancelled\";\r\n    /**\r\n     * A duplicated navigation is a navigation that failed because it was\r\n     * initiated while already being at the exact same location.\r\n     */\r\n    NavigationFailureType[NavigationFailureType[\"duplicated\"] = 16] = \"duplicated\";\r\n})(NavigationFailureType || (NavigationFailureType = {}));\r\n// DEV only debug messages\r\nconst ErrorTypeMessages = {\r\n    [1 /* MATCHER_NOT_FOUND */]({ location, currentLocation }) {\r\n        return `No match for\\n ${JSON.stringify(location)}${currentLocation\r\n            ? '\\nwhile being at\\n' + JSON.stringify(currentLocation)\r\n            : ''}`;\r\n    },\r\n    [2 /* NAVIGATION_GUARD_REDIRECT */]({ from, to, }) {\r\n        return `Redirected from \"${from.fullPath}\" to \"${stringifyRoute(to)}\" via a navigation guard.`;\r\n    },\r\n    [4 /* NAVIGATION_ABORTED */]({ from, to }) {\r\n        return `Navigation aborted from \"${from.fullPath}\" to \"${to.fullPath}\" via a navigation guard.`;\r\n    },\r\n    [8 /* NAVIGATION_CANCELLED */]({ from, to }) {\r\n        return `Navigation cancelled from \"${from.fullPath}\" to \"${to.fullPath}\" with a new navigation.`;\r\n    },\r\n    [16 /* NAVIGATION_DUPLICATED */]({ from, to }) {\r\n        return `Avoided redundant navigation to current location: \"${from.fullPath}\".`;\r\n    },\r\n};\r\nfunction createRouterError(type, params) {\r\n    if ((process.env.NODE_ENV !== 'production') || !true) {\r\n        return assign(new Error(ErrorTypeMessages[type](params)), {\r\n            type,\r\n            [NavigationFailureSymbol]: true,\r\n        }, params);\r\n    }\r\n    else {\r\n        return assign(new Error(), {\r\n            type,\r\n            [NavigationFailureSymbol]: true,\r\n        }, params);\r\n    }\r\n}\r\nfunction isNavigationFailure(error, type) {\r\n    return (error instanceof Error &&\r\n        NavigationFailureSymbol in error &&\r\n        (type == null || !!(error.type & type)));\r\n}\r\nconst propertiesToLog = ['params', 'query', 'hash'];\r\nfunction stringifyRoute(to) {\r\n    if (typeof to === 'string')\r\n        return to;\r\n    if ('path' in to)\r\n        return to.path;\r\n    const location = {};\r\n    for (const key of propertiesToLog) {\r\n        if (key in to)\r\n            location[key] = to[key];\r\n    }\r\n    return JSON.stringify(location, null, 2);\r\n}\n\n// default pattern for a param: non greedy everything but /\r\nconst BASE_PARAM_PATTERN = '[^/]+?';\r\nconst BASE_PATH_PARSER_OPTIONS = {\r\n    sensitive: false,\r\n    strict: false,\r\n    start: true,\r\n    end: true,\r\n};\r\n// Special Regex characters that must be escaped in static tokens\r\nconst REGEX_CHARS_RE = /[.+*?^${}()[\\]/\\\\]/g;\r\n/**\r\n * Creates a path parser from an array of Segments (a segment is an array of Tokens)\r\n *\r\n * @param segments - array of segments returned by tokenizePath\r\n * @param extraOptions - optional options for the regexp\r\n * @returns a PathParser\r\n */\r\nfunction tokensToParser(segments, extraOptions) {\r\n    const options = assign({}, BASE_PATH_PARSER_OPTIONS, extraOptions);\r\n    // the amount of scores is the same as the length of segments except for the root segment \"/\"\r\n    let score = [];\r\n    // the regexp as a string\r\n    let pattern = options.start ? '^' : '';\r\n    // extracted keys\r\n    const keys = [];\r\n    for (const segment of segments) {\r\n        // the root segment needs special treatment\r\n        const segmentScores = segment.length ? [] : [90 /* Root */];\r\n        // allow trailing slash\r\n        if (options.strict && !segment.length)\r\n            pattern += '/';\r\n        for (let tokenIndex = 0; tokenIndex < segment.length; tokenIndex++) {\r\n            const token = segment[tokenIndex];\r\n            // resets the score if we are inside a sub segment /:a-other-:b\r\n            let subSegmentScore = 40 /* Segment */ +\r\n                (options.sensitive ? 0.25 /* BonusCaseSensitive */ : 0);\r\n            if (token.type === 0 /* Static */) {\r\n                // prepend the slash if we are starting a new segment\r\n                if (!tokenIndex)\r\n                    pattern += '/';\r\n                pattern += token.value.replace(REGEX_CHARS_RE, '\\\\$&');\r\n                subSegmentScore += 40 /* Static */;\r\n            }\r\n            else if (token.type === 1 /* Param */) {\r\n                const { value, repeatable, optional, regexp } = token;\r\n                keys.push({\r\n                    name: value,\r\n                    repeatable,\r\n                    optional,\r\n                });\r\n                const re = regexp ? regexp : BASE_PARAM_PATTERN;\r\n                // the user provided a custom regexp /:id(\\\\d+)\r\n                if (re !== BASE_PARAM_PATTERN) {\r\n                    subSegmentScore += 10 /* BonusCustomRegExp */;\r\n                    // make sure the regexp is valid before using it\r\n                    try {\r\n                        new RegExp(`(${re})`);\r\n                    }\r\n                    catch (err) {\r\n                        throw new Error(`Invalid custom RegExp for param \"${value}\" (${re}): ` +\r\n                            err.message);\r\n                    }\r\n                }\r\n                // when we repeat we must take care of the repeating leading slash\r\n                let subPattern = repeatable ? `((?:${re})(?:/(?:${re}))*)` : `(${re})`;\r\n                // prepend the slash if we are starting a new segment\r\n                if (!tokenIndex)\r\n                    subPattern = optional ? `(?:/${subPattern})` : '/' + subPattern;\r\n                if (optional)\r\n                    subPattern += '?';\r\n                pattern += subPattern;\r\n                subSegmentScore += 20 /* Dynamic */;\r\n                if (optional)\r\n                    subSegmentScore += -8 /* BonusOptional */;\r\n                if (repeatable)\r\n                    subSegmentScore += -20 /* BonusRepeatable */;\r\n                if (re === '.*')\r\n                    subSegmentScore += -50 /* BonusWildcard */;\r\n            }\r\n            segmentScores.push(subSegmentScore);\r\n        }\r\n        // an empty array like /home/ -> [[{home}], []]\r\n        // if (!segment.length) pattern += '/'\r\n        score.push(segmentScores);\r\n    }\r\n    // only apply the strict bonus to the last score\r\n    if (options.strict && options.end) {\r\n        const i = score.length - 1;\r\n        score[i][score[i].length - 1] += 0.7000000000000001 /* BonusStrict */;\r\n    }\r\n    // TODO: dev only warn double trailing slash\r\n    if (!options.strict)\r\n        pattern += '/?';\r\n    if (options.end)\r\n        pattern += '$';\r\n    // allow paths like /dynamic to only match dynamic or dynamic/... but not dynamic_something_else\r\n    else if (options.strict)\r\n        pattern += '(?:/|$)';\r\n    const re = new RegExp(pattern, options.sensitive ? '' : 'i');\r\n    function parse(path) {\r\n        const match = path.match(re);\r\n        const params = {};\r\n        if (!match)\r\n            return null;\r\n        for (let i = 1; i < match.length; i++) {\r\n            const value = match[i] || '';\r\n            const key = keys[i - 1];\r\n            params[key.name] = value && key.repeatable ? value.split('/') : value;\r\n        }\r\n        return params;\r\n    }\r\n    function stringify(params) {\r\n        let path = '';\r\n        // for optional parameters to allow to be empty\r\n        let avoidDuplicatedSlash = false;\r\n        for (const segment of segments) {\r\n            if (!avoidDuplicatedSlash || !path.endsWith('/'))\r\n                path += '/';\r\n            avoidDuplicatedSlash = false;\r\n            for (const token of segment) {\r\n                if (token.type === 0 /* Static */) {\r\n                    path += token.value;\r\n                }\r\n                else if (token.type === 1 /* Param */) {\r\n                    const { value, repeatable, optional } = token;\r\n                    const param = value in params ? params[value] : '';\r\n                    if (Array.isArray(param) && !repeatable)\r\n                        throw new Error(`Provided param \"${value}\" is an array but it is not repeatable (* or + modifiers)`);\r\n                    const text = Array.isArray(param) ? param.join('/') : param;\r\n                    if (!text) {\r\n                        if (optional) {\r\n                            // remove the last slash as we could be at the end\r\n                            if (path.endsWith('/'))\r\n                                path = path.slice(0, -1);\r\n                            // do not append a slash on the next iteration\r\n                            else\r\n                                avoidDuplicatedSlash = true;\r\n                        }\r\n                        else\r\n                            throw new Error(`Missing required param \"${value}\"`);\r\n                    }\r\n                    path += text;\r\n                }\r\n            }\r\n        }\r\n        return path;\r\n    }\r\n    return {\r\n        re,\r\n        score,\r\n        keys,\r\n        parse,\r\n        stringify,\r\n    };\r\n}\r\n/**\r\n * Compares an array of numbers as used in PathParser.score and returns a\r\n * number. This function can be used to `sort` an array\r\n * @param a - first array of numbers\r\n * @param b - second array of numbers\r\n * @returns 0 if both are equal, < 0 if a should be sorted first, > 0 if b\r\n * should be sorted first\r\n */\r\nfunction compareScoreArray(a, b) {\r\n    let i = 0;\r\n    while (i < a.length && i < b.length) {\r\n        const diff = b[i] - a[i];\r\n        // only keep going if diff === 0\r\n        if (diff)\r\n            return diff;\r\n        i++;\r\n    }\r\n    // if the last subsegment was Static, the shorter segments should be sorted first\r\n    // otherwise sort the longest segment first\r\n    if (a.length < b.length) {\r\n        return a.length === 1 && a[0] === 40 /* Static */ + 40 /* Segment */\r\n            ? -1\r\n            : 1;\r\n    }\r\n    else if (a.length > b.length) {\r\n        return b.length === 1 && b[0] === 40 /* Static */ + 40 /* Segment */\r\n            ? 1\r\n            : -1;\r\n    }\r\n    return 0;\r\n}\r\n/**\r\n * Compare function that can be used with `sort` to sort an array of PathParser\r\n * @param a - first PathParser\r\n * @param b - second PathParser\r\n * @returns 0 if both are equal, < 0 if a should be sorted first, > 0 if b\r\n */\r\nfunction comparePathParserScore(a, b) {\r\n    let i = 0;\r\n    const aScore = a.score;\r\n    const bScore = b.score;\r\n    while (i < aScore.length && i < bScore.length) {\r\n        const comp = compareScoreArray(aScore[i], bScore[i]);\r\n        // do not return if both are equal\r\n        if (comp)\r\n            return comp;\r\n        i++;\r\n    }\r\n    // if a and b share the same score entries but b has more, sort b first\r\n    return bScore.length - aScore.length;\r\n    // this is the ternary version\r\n    // return aScore.length < bScore.length\r\n    //   ? 1\r\n    //   : aScore.length > bScore.length\r\n    //   ? -1\r\n    //   : 0\r\n}\n\nconst ROOT_TOKEN = {\r\n    type: 0 /* Static */,\r\n    value: '',\r\n};\r\nconst VALID_PARAM_RE = /[a-zA-Z0-9_]/;\r\n// After some profiling, the cache seems to be unnecessary because tokenizePath\r\n// (the slowest part of adding a route) is very fast\r\n// const tokenCache = new Map<string, Token[][]>()\r\nfunction tokenizePath(path) {\r\n    if (!path)\r\n        return [[]];\r\n    if (path === '/')\r\n        return [[ROOT_TOKEN]];\r\n    if (!path.startsWith('/')) {\r\n        throw new Error((process.env.NODE_ENV !== 'production')\r\n            ? `Route paths should start with a \"/\": \"${path}\" should be \"/${path}\".`\r\n            : `Invalid path \"${path}\"`);\r\n    }\r\n    // if (tokenCache.has(path)) return tokenCache.get(path)!\r\n    function crash(message) {\r\n        throw new Error(`ERR (${state})/\"${buffer}\": ${message}`);\r\n    }\r\n    let state = 0 /* Static */;\r\n    let previousState = state;\r\n    const tokens = [];\r\n    // the segment will always be valid because we get into the initial state\r\n    // with the leading /\r\n    let segment;\r\n    function finalizeSegment() {\r\n        if (segment)\r\n            tokens.push(segment);\r\n        segment = [];\r\n    }\r\n    // index on the path\r\n    let i = 0;\r\n    // char at index\r\n    let char;\r\n    // buffer of the value read\r\n    let buffer = '';\r\n    // custom regexp for a param\r\n    let customRe = '';\r\n    function consumeBuffer() {\r\n        if (!buffer)\r\n            return;\r\n        if (state === 0 /* Static */) {\r\n            segment.push({\r\n                type: 0 /* Static */,\r\n                value: buffer,\r\n            });\r\n        }\r\n        else if (state === 1 /* Param */ ||\r\n            state === 2 /* ParamRegExp */ ||\r\n            state === 3 /* ParamRegExpEnd */) {\r\n            if (segment.length > 1 && (char === '*' || char === '+'))\r\n                crash(`A repeatable param (${buffer}) must be alone in its segment. eg: '/:ids+.`);\r\n            segment.push({\r\n                type: 1 /* Param */,\r\n                value: buffer,\r\n                regexp: customRe,\r\n                repeatable: char === '*' || char === '+',\r\n                optional: char === '*' || char === '?',\r\n            });\r\n        }\r\n        else {\r\n            crash('Invalid state to consume buffer');\r\n        }\r\n        buffer = '';\r\n    }\r\n    function addCharToBuffer() {\r\n        buffer += char;\r\n    }\r\n    while (i < path.length) {\r\n        char = path[i++];\r\n        if (char === '\\\\' && state !== 2 /* ParamRegExp */) {\r\n            previousState = state;\r\n            state = 4 /* EscapeNext */;\r\n            continue;\r\n        }\r\n        switch (state) {\r\n            case 0 /* Static */:\r\n                if (char === '/') {\r\n                    if (buffer) {\r\n                        consumeBuffer();\r\n                    }\r\n                    finalizeSegment();\r\n                }\r\n                else if (char === ':') {\r\n                    consumeBuffer();\r\n                    state = 1 /* Param */;\r\n                }\r\n                else {\r\n                    addCharToBuffer();\r\n                }\r\n                break;\r\n            case 4 /* EscapeNext */:\r\n                addCharToBuffer();\r\n                state = previousState;\r\n                break;\r\n            case 1 /* Param */:\r\n                if (char === '(') {\r\n                    state = 2 /* ParamRegExp */;\r\n                    customRe = '';\r\n                }\r\n                else if (VALID_PARAM_RE.test(char)) {\r\n                    addCharToBuffer();\r\n                }\r\n                else {\r\n                    consumeBuffer();\r\n                    state = 0 /* Static */;\r\n                    // go back one character if we were not modifying\r\n                    if (char !== '*' && char !== '?' && char !== '+')\r\n                        i--;\r\n                }\r\n                break;\r\n            case 2 /* ParamRegExp */:\r\n                // TODO: is it worth handling nested regexp? like :p(?:prefix_([^/]+)_suffix)\r\n                // it already works by escaping the closing )\r\n                // https://paths.esm.dev/?p=AAMeJbiAwQEcDKbAoAAkP60PG2R6QAvgNaA6AFACM2ABuQBB#\r\n                // is this really something people need since you can also write\r\n                // /prefix_:p()_suffix\r\n                if (char === ')') {\r\n                    // handle the escaped )\r\n                    if (customRe[customRe.length - 1] == '\\\\')\r\n                        customRe = customRe.slice(0, -1) + char;\r\n                    else\r\n                        state = 3 /* ParamRegExpEnd */;\r\n                }\r\n                else {\r\n                    customRe += char;\r\n                }\r\n                break;\r\n            case 3 /* ParamRegExpEnd */:\r\n                // same as finalizing a param\r\n                consumeBuffer();\r\n                state = 0 /* Static */;\r\n                // go back one character if we were not modifying\r\n                if (char !== '*' && char !== '?' && char !== '+')\r\n                    i--;\r\n                break;\r\n            default:\r\n                crash('Unknown state');\r\n                break;\r\n        }\r\n    }\r\n    if (state === 2 /* ParamRegExp */)\r\n        crash(`Unfinished custom RegExp for param \"${buffer}\"`);\r\n    consumeBuffer();\r\n    finalizeSegment();\r\n    // tokenCache.set(path, tokens)\r\n    return tokens;\r\n}\n\nfunction createRouteRecordMatcher(record, parent, options) {\r\n    const parser = tokensToParser(tokenizePath(record.path), options);\r\n    // warn against params with the same name\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        const existingKeys = new Set();\r\n        for (const key of parser.keys) {\r\n            if (existingKeys.has(key.name))\r\n                warn(`Found duplicated params with name \"${key.name}\" for path \"${record.path}\". Only the last one will be available on \"$route.params\".`);\r\n            existingKeys.add(key.name);\r\n        }\r\n    }\r\n    const matcher = assign(parser, {\r\n        record,\r\n        parent,\r\n        // these needs to be populated by the parent\r\n        children: [],\r\n        alias: [],\r\n    });\r\n    if (parent) {\r\n        // both are aliases or both are not aliases\r\n        // we don't want to mix them because the order is used when\r\n        // passing originalRecord in Matcher.addRoute\r\n        if (!matcher.record.aliasOf === !parent.record.aliasOf)\r\n            parent.children.push(matcher);\r\n    }\r\n    return matcher;\r\n}\n\n/**\r\n * Creates a Router Matcher.\r\n *\r\n * @internal\r\n * @param routes - array of initial routes\r\n * @param globalOptions - global route options\r\n */\r\nfunction createRouterMatcher(routes, globalOptions) {\r\n    // normalized ordered array of matchers\r\n    const matchers = [];\r\n    const matcherMap = new Map();\r\n    globalOptions = mergeOptions({ strict: false, end: true, sensitive: false }, globalOptions);\r\n    function getRecordMatcher(name) {\r\n        return matcherMap.get(name);\r\n    }\r\n    function addRoute(record, parent, originalRecord) {\r\n        // used later on to remove by name\r\n        let isRootAdd = !originalRecord;\r\n        let mainNormalizedRecord = normalizeRouteRecord(record);\r\n        // we might be the child of an alias\r\n        mainNormalizedRecord.aliasOf = originalRecord && originalRecord.record;\r\n        const options = mergeOptions(globalOptions, record);\r\n        // generate an array of records to correctly handle aliases\r\n        const normalizedRecords = [\r\n            mainNormalizedRecord,\r\n        ];\r\n        if ('alias' in record) {\r\n            const aliases = typeof record.alias === 'string' ? [record.alias] : record.alias;\r\n            for (const alias of aliases) {\r\n                normalizedRecords.push(assign({}, mainNormalizedRecord, {\r\n                    // this allows us to hold a copy of the `components` option\r\n                    // so that async components cache is hold on the original record\r\n                    components: originalRecord\r\n                        ? originalRecord.record.components\r\n                        : mainNormalizedRecord.components,\r\n                    path: alias,\r\n                    // we might be the child of an alias\r\n                    aliasOf: originalRecord\r\n                        ? originalRecord.record\r\n                        : mainNormalizedRecord,\r\n                }));\r\n            }\r\n        }\r\n        let matcher;\r\n        let originalMatcher;\r\n        for (const normalizedRecord of normalizedRecords) {\r\n            let { path } = normalizedRecord;\r\n            // Build up the path for nested routes if the child isn't an absolute\r\n            // route. Only add the / delimiter if the child path isn't empty and if the\r\n            // parent path doesn't have a trailing slash\r\n            if (parent && path[0] !== '/') {\r\n                let parentPath = parent.record.path;\r\n                let connectingSlash = parentPath[parentPath.length - 1] === '/' ? '' : '/';\r\n                normalizedRecord.path =\r\n                    parent.record.path + (path && connectingSlash + path);\r\n            }\r\n            if ((process.env.NODE_ENV !== 'production') && normalizedRecord.path === '*') {\r\n                throw new Error('Catch all routes (\"*\") must now be defined using a param with a custom regexp.\\n' +\r\n                    'See more at https://next.router.vuejs.org/guide/migration/#removed-star-or-catch-all-routes.');\r\n            }\r\n            // create the object before hand so it can be passed to children\r\n            matcher = createRouteRecordMatcher(normalizedRecord, parent, options);\r\n            if ((process.env.NODE_ENV !== 'production') && parent && path[0] === '/')\r\n                checkMissingParamsInAbsolutePath(matcher, parent);\r\n            // if we are an alias we must tell the original record that we exist\r\n            // so we can be removed\r\n            if (originalRecord) {\r\n                originalRecord.alias.push(matcher);\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    checkSameParams(originalRecord, matcher);\r\n                }\r\n            }\r\n            else {\r\n                // otherwise, the first record is the original and others are aliases\r\n                originalMatcher = originalMatcher || matcher;\r\n                if (originalMatcher !== matcher)\r\n                    originalMatcher.alias.push(matcher);\r\n                // remove the route if named and only for the top record (avoid in nested calls)\r\n                // this works because the original record is the first one\r\n                if (isRootAdd && record.name && !isAliasRecord(matcher))\r\n                    removeRoute(record.name);\r\n            }\r\n            if ('children' in mainNormalizedRecord) {\r\n                let children = mainNormalizedRecord.children;\r\n                for (let i = 0; i < children.length; i++) {\r\n                    addRoute(children[i], matcher, originalRecord && originalRecord.children[i]);\r\n                }\r\n            }\r\n            // if there was no original record, then the first one was not an alias and all\r\n            // other alias (if any) need to reference this record when adding children\r\n            originalRecord = originalRecord || matcher;\r\n            insertMatcher(matcher);\r\n        }\r\n        return originalMatcher\r\n            ? () => {\r\n                // since other matchers are aliases, they should be removed by the original matcher\r\n                removeRoute(originalMatcher);\r\n            }\r\n            : noop;\r\n    }\r\n    function removeRoute(matcherRef) {\r\n        if (isRouteName(matcherRef)) {\r\n            const matcher = matcherMap.get(matcherRef);\r\n            if (matcher) {\r\n                matcherMap.delete(matcherRef);\r\n                matchers.splice(matchers.indexOf(matcher), 1);\r\n                matcher.children.forEach(removeRoute);\r\n                matcher.alias.forEach(removeRoute);\r\n            }\r\n        }\r\n        else {\r\n            let index = matchers.indexOf(matcherRef);\r\n            if (index > -1) {\r\n                matchers.splice(index, 1);\r\n                if (matcherRef.record.name)\r\n                    matcherMap.delete(matcherRef.record.name);\r\n                matcherRef.children.forEach(removeRoute);\r\n                matcherRef.alias.forEach(removeRoute);\r\n            }\r\n        }\r\n    }\r\n    function getRoutes() {\r\n        return matchers;\r\n    }\r\n    function insertMatcher(matcher) {\r\n        let i = 0;\r\n        // console.log('i is', { i })\r\n        while (i < matchers.length &&\r\n            comparePathParserScore(matcher, matchers[i]) >= 0)\r\n            i++;\r\n        // console.log('END i is', { i })\r\n        // while (i < matchers.length && matcher.score <= matchers[i].score) i++\r\n        matchers.splice(i, 0, matcher);\r\n        // only add the original record to the name map\r\n        if (matcher.record.name && !isAliasRecord(matcher))\r\n            matcherMap.set(matcher.record.name, matcher);\r\n    }\r\n    function resolve(location, currentLocation) {\r\n        let matcher;\r\n        let params = {};\r\n        let path;\r\n        let name;\r\n        if ('name' in location && location.name) {\r\n            matcher = matcherMap.get(location.name);\r\n            if (!matcher)\r\n                throw createRouterError(1 /* MATCHER_NOT_FOUND */, {\r\n                    location,\r\n                });\r\n            name = matcher.record.name;\r\n            params = assign(\r\n            // paramsFromLocation is a new object\r\n            paramsFromLocation(currentLocation.params, \r\n            // only keep params that exist in the resolved location\r\n            // TODO: only keep optional params coming from a parent record\r\n            matcher.keys.filter(k => !k.optional).map(k => k.name)), location.params);\r\n            // throws if cannot be stringified\r\n            path = matcher.stringify(params);\r\n        }\r\n        else if ('path' in location) {\r\n            // no need to resolve the path with the matcher as it was provided\r\n            // this also allows the user to control the encoding\r\n            path = location.path;\r\n            if ((process.env.NODE_ENV !== 'production') && !path.startsWith('/')) {\r\n                warn(`The Matcher cannot resolve relative paths but received \"${path}\". Unless you directly called \\`matcher.resolve(\"${path}\")\\`, this is probably a bug in vue-router. Please open an issue at https://new-issue.vuejs.org/?repo=vuejs/vue-router-next.`);\r\n            }\r\n            matcher = matchers.find(m => m.re.test(path));\r\n            // matcher should have a value after the loop\r\n            if (matcher) {\r\n                // TODO: dev warning of unused params if provided\r\n                // we know the matcher works because we tested the regexp\r\n                params = matcher.parse(path);\r\n                name = matcher.record.name;\r\n            }\r\n            // location is a relative path\r\n        }\r\n        else {\r\n            // match by name or path of current route\r\n            matcher = currentLocation.name\r\n                ? matcherMap.get(currentLocation.name)\r\n                : matchers.find(m => m.re.test(currentLocation.path));\r\n            if (!matcher)\r\n                throw createRouterError(1 /* MATCHER_NOT_FOUND */, {\r\n                    location,\r\n                    currentLocation,\r\n                });\r\n            name = matcher.record.name;\r\n            // since we are navigating to the same location, we don't need to pick the\r\n            // params like when `name` is provided\r\n            params = assign({}, currentLocation.params, location.params);\r\n            path = matcher.stringify(params);\r\n        }\r\n        const matched = [];\r\n        let parentMatcher = matcher;\r\n        while (parentMatcher) {\r\n            // reversed order so parents are at the beginning\r\n            matched.unshift(parentMatcher.record);\r\n            parentMatcher = parentMatcher.parent;\r\n        }\r\n        return {\r\n            name,\r\n            path,\r\n            params,\r\n            matched,\r\n            meta: mergeMetaFields(matched),\r\n        };\r\n    }\r\n    // add initial routes\r\n    routes.forEach(route => addRoute(route));\r\n    return { addRoute, resolve, removeRoute, getRoutes, getRecordMatcher };\r\n}\r\nfunction paramsFromLocation(params, keys) {\r\n    let newParams = {};\r\n    for (let key of keys) {\r\n        if (key in params)\r\n            newParams[key] = params[key];\r\n    }\r\n    return newParams;\r\n}\r\n/**\r\n * Normalizes a RouteRecordRaw. Creates a copy\r\n *\r\n * @param record\r\n * @returns the normalized version\r\n */\r\nfunction normalizeRouteRecord(record) {\r\n    return {\r\n        path: record.path,\r\n        redirect: record.redirect,\r\n        name: record.name,\r\n        meta: record.meta || {},\r\n        aliasOf: undefined,\r\n        beforeEnter: record.beforeEnter,\r\n        props: normalizeRecordProps(record),\r\n        children: record.children || [],\r\n        instances: {},\r\n        leaveGuards: [],\r\n        updateGuards: [],\r\n        enterCallbacks: {},\r\n        components: 'components' in record\r\n            ? record.components || {}\r\n            : { default: record.component },\r\n    };\r\n}\r\n/**\r\n * Normalize the optional `props` in a record to always be an object similar to\r\n * components. Also accept a boolean for components.\r\n * @param record\r\n */\r\nfunction normalizeRecordProps(record) {\r\n    const propsObject = {};\r\n    // props does not exist on redirect records but we can set false directly\r\n    const props = record.props || false;\r\n    if ('component' in record) {\r\n        propsObject.default = props;\r\n    }\r\n    else {\r\n        // NOTE: we could also allow a function to be applied to every component.\r\n        // Would need user feedback for use cases\r\n        for (let name in record.components)\r\n            propsObject[name] = typeof props === 'boolean' ? props : props[name];\r\n    }\r\n    return propsObject;\r\n}\r\n/**\r\n * Checks if a record or any of its parent is an alias\r\n * @param record\r\n */\r\nfunction isAliasRecord(record) {\r\n    while (record) {\r\n        if (record.record.aliasOf)\r\n            return true;\r\n        record = record.parent;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * Merge meta fields of an array of records\r\n *\r\n * @param matched - array of matched records\r\n */\r\nfunction mergeMetaFields(matched) {\r\n    return matched.reduce((meta, record) => assign(meta, record.meta), {});\r\n}\r\nfunction mergeOptions(defaults, partialOptions) {\r\n    let options = {};\r\n    for (let key in defaults) {\r\n        options[key] =\r\n            key in partialOptions ? partialOptions[key] : defaults[key];\r\n    }\r\n    return options;\r\n}\r\nfunction isSameParam(a, b) {\r\n    return (a.name === b.name &&\r\n        a.optional === b.optional &&\r\n        a.repeatable === b.repeatable);\r\n}\r\nfunction checkSameParams(a, b) {\r\n    for (let key of a.keys) {\r\n        if (!b.keys.find(isSameParam.bind(null, key)))\r\n            return warn(`Alias \"${b.record.path}\" and the original record: \"${a.record.path}\" should have the exact same param named \"${key.name}\"`);\r\n    }\r\n    for (let key of b.keys) {\r\n        if (!a.keys.find(isSameParam.bind(null, key)))\r\n            return warn(`Alias \"${b.record.path}\" and the original record: \"${a.record.path}\" should have the exact same param named \"${key.name}\"`);\r\n    }\r\n}\r\nfunction checkMissingParamsInAbsolutePath(record, parent) {\r\n    for (let key of parent.keys) {\r\n        if (!record.keys.find(isSameParam.bind(null, key)))\r\n            return warn(`Absolute path \"${record.record.path}\" should have the exact same param named \"${key.name}\" as its parent \"${parent.record.path}\".`);\r\n    }\r\n}\n\n/**\r\n * Encoding Rules ␣ = Space Path: ␣ \" < > # ? { } Query: ␣ \" < > # & = Hash: ␣ \"\r\n * < > `\r\n *\r\n * On top of that, the RFC3986 (https://tools.ietf.org/html/rfc3986#section-2.2)\r\n * defines some extra characters to be encoded. Most browsers do not encode them\r\n * in encodeURI https://github.com/whatwg/url/issues/369, so it may be safer to\r\n * also encode `!'()*`. Leaving unencoded only ASCII alphanumeric(`a-zA-Z0-9`)\r\n * plus `-._~`. This extra safety should be applied to query by patching the\r\n * string returned by encodeURIComponent encodeURI also encodes `[\\]^`. `\\`\r\n * should be encoded to avoid ambiguity. Browsers (IE, FF, C) transform a `\\`\r\n * into a `/` if directly typed in. The _backtick_ (`````) should also be\r\n * encoded everywhere because some browsers like FF encode it when directly\r\n * written while others don't. Safari and IE don't encode ``\"<>{}``` in hash.\r\n */\r\n// const EXTRA_RESERVED_RE = /[!'()*]/g\r\n// const encodeReservedReplacer = (c: string) => '%' + c.charCodeAt(0).toString(16)\r\nconst HASH_RE = /#/g; // %23\r\nconst AMPERSAND_RE = /&/g; // %26\r\nconst SLASH_RE = /\\//g; // %2F\r\nconst EQUAL_RE = /=/g; // %3D\r\nconst IM_RE = /\\?/g; // %3F\r\nconst ENC_BRACKET_OPEN_RE = /%5B/g; // [\r\nconst ENC_BRACKET_CLOSE_RE = /%5D/g; // ]\r\nconst ENC_CARET_RE = /%5E/g; // ^\r\nconst ENC_BACKTICK_RE = /%60/g; // `\r\nconst ENC_CURLY_OPEN_RE = /%7B/g; // {\r\nconst ENC_PIPE_RE = /%7C/g; // |\r\nconst ENC_CURLY_CLOSE_RE = /%7D/g; // }\r\n/**\r\n * Encode characters that need to be encoded on the path, search and hash\r\n * sections of the URL.\r\n *\r\n * @internal\r\n * @param text - string to encode\r\n * @returns encoded string\r\n */\r\nfunction commonEncode(text) {\r\n    return encodeURI('' + text)\r\n        .replace(ENC_PIPE_RE, '|')\r\n        .replace(ENC_BRACKET_OPEN_RE, '[')\r\n        .replace(ENC_BRACKET_CLOSE_RE, ']');\r\n}\r\n/**\r\n * Encode characters that need to be encoded on the hash section of the URL.\r\n *\r\n * @param text - string to encode\r\n * @returns encoded string\r\n */\r\nfunction encodeHash(text) {\r\n    return commonEncode(text)\r\n        .replace(ENC_CURLY_OPEN_RE, '{')\r\n        .replace(ENC_CURLY_CLOSE_RE, '}')\r\n        .replace(ENC_CARET_RE, '^');\r\n}\r\n/**\r\n * Encode characters that need to be encoded query values on the query\r\n * section of the URL.\r\n *\r\n * @param text - string to encode\r\n * @returns encoded string\r\n */\r\nfunction encodeQueryValue(text) {\r\n    return commonEncode(text)\r\n        .replace(HASH_RE, '%23')\r\n        .replace(AMPERSAND_RE, '%26')\r\n        .replace(ENC_BACKTICK_RE, '`')\r\n        .replace(ENC_CURLY_OPEN_RE, '{')\r\n        .replace(ENC_CURLY_CLOSE_RE, '}')\r\n        .replace(ENC_CARET_RE, '^');\r\n}\r\n/**\r\n * Like `encodeQueryValue` but also encodes the `=` character.\r\n *\r\n * @param text - string to encode\r\n */\r\nfunction encodeQueryKey(text) {\r\n    return encodeQueryValue(text).replace(EQUAL_RE, '%3D');\r\n}\r\n/**\r\n * Encode characters that need to be encoded on the path section of the URL.\r\n *\r\n * @param text - string to encode\r\n * @returns encoded string\r\n */\r\nfunction encodePath(text) {\r\n    return commonEncode(text).replace(HASH_RE, '%23').replace(IM_RE, '%3F');\r\n}\r\n/**\r\n * Encode characters that need to be encoded on the path section of the URL as a\r\n * param. This function encodes everything {@link encodePath} does plus the\r\n * slash (`/`) character.\r\n *\r\n * @param text - string to encode\r\n * @returns encoded string\r\n */\r\nfunction encodeParam(text) {\r\n    return encodePath(text).replace(SLASH_RE, '%2F');\r\n}\r\n/**\r\n * Decode text using `decodeURIComponent`. Returns the original text if it\r\n * fails.\r\n *\r\n * @param text - string to decode\r\n * @returns decoded string\r\n */\r\nfunction decode(text) {\r\n    try {\r\n        return decodeURIComponent('' + text);\r\n    }\r\n    catch (err) {\r\n        (process.env.NODE_ENV !== 'production') && warn(`Error decoding \"${text}\". Using original value`);\r\n    }\r\n    return '' + text;\r\n}\n\n/**\r\n * Transforms a queryString into a {@link LocationQuery} object. Accept both, a\r\n * version with the leading `?` and without Should work as URLSearchParams\r\n\n * @internal\r\n *\r\n * @param search - search string to parse\r\n * @returns a query object\r\n */\r\nfunction parseQuery(search) {\r\n    const query = {};\r\n    // avoid creating an object with an empty key and empty value\r\n    // because of split('&')\r\n    if (search === '' || search === '?')\r\n        return query;\r\n    const hasLeadingIM = search[0] === '?';\r\n    const searchParams = (hasLeadingIM ? search.slice(1) : search).split('&');\r\n    for (let i = 0; i < searchParams.length; ++i) {\r\n        const searchParam = searchParams[i];\r\n        // allow the = character\r\n        let eqPos = searchParam.indexOf('=');\r\n        let key = decode(eqPos < 0 ? searchParam : searchParam.slice(0, eqPos));\r\n        let value = eqPos < 0 ? null : decode(searchParam.slice(eqPos + 1));\r\n        if (key in query) {\r\n            // an extra variable for ts types\r\n            let currentValue = query[key];\r\n            if (!Array.isArray(currentValue)) {\r\n                currentValue = query[key] = [currentValue];\r\n            }\r\n            currentValue.push(value);\r\n        }\r\n        else {\r\n            query[key] = value;\r\n        }\r\n    }\r\n    return query;\r\n}\r\n/**\r\n * Stringifies a {@link LocationQueryRaw} object. Like `URLSearchParams`, it\r\n * doesn't prepend a `?`\r\n *\r\n * @internal\r\n *\r\n * @param query - query object to stringify\r\n * @returns string version of the query without the leading `?`\r\n */\r\nfunction stringifyQuery(query) {\r\n    let search = '';\r\n    for (let key in query) {\r\n        if (search.length)\r\n            search += '&';\r\n        const value = query[key];\r\n        key = encodeQueryKey(key);\r\n        if (value == null) {\r\n            // only null adds the value\r\n            if (value !== undefined)\r\n                search += key;\r\n            continue;\r\n        }\r\n        // keep null values\r\n        let values = Array.isArray(value)\r\n            ? value.map(v => v && encodeQueryValue(v))\r\n            : [value && encodeQueryValue(value)];\r\n        for (let i = 0; i < values.length; i++) {\r\n            // only append & with i > 0\r\n            search += (i ? '&' : '') + key;\r\n            if (values[i] != null)\r\n                search += ('=' + values[i]);\r\n        }\r\n    }\r\n    return search;\r\n}\r\n/**\r\n * Transforms a {@link LocationQueryRaw} into a {@link LocationQuery} by casting\r\n * numbers into strings, removing keys with an undefined value and replacing\r\n * undefined with null in arrays\r\n *\r\n * @param query - query object to normalize\r\n * @returns a normalized query object\r\n */\r\nfunction normalizeQuery(query) {\r\n    const normalizedQuery = {};\r\n    for (let key in query) {\r\n        let value = query[key];\r\n        if (value !== undefined) {\r\n            normalizedQuery[key] = Array.isArray(value)\r\n                ? value.map(v => (v == null ? null : '' + v))\r\n                : value == null\r\n                    ? value\r\n                    : '' + value;\r\n        }\r\n    }\r\n    return normalizedQuery;\r\n}\n\n/**\r\n * Create a list of callbacks that can be reset. Used to create before and after navigation guards list\r\n */\r\nfunction useCallbacks() {\r\n    let handlers = [];\r\n    function add(handler) {\r\n        handlers.push(handler);\r\n        return () => {\r\n            const i = handlers.indexOf(handler);\r\n            if (i > -1)\r\n                handlers.splice(i, 1);\r\n        };\r\n    }\r\n    function reset() {\r\n        handlers = [];\r\n    }\r\n    return {\r\n        add,\r\n        list: () => handlers,\r\n        reset,\r\n    };\r\n}\n\nfunction registerGuard(list, guard) {\r\n    const removeFromList = () => {\r\n        const index = list.indexOf(guard);\r\n        if (index > -1)\r\n            list.splice(index, 1);\r\n    };\r\n    onUnmounted(removeFromList);\r\n    onDeactivated(removeFromList);\r\n    onActivated(() => {\r\n        const index = list.indexOf(guard);\r\n        if (index < 0)\r\n            list.push(guard);\r\n    });\r\n    list.push(guard);\r\n}\r\n/**\r\n * Add a navigation guard that triggers whenever the component for the current\r\n * location is about to be left. Similar to {@link beforeRouteLeave} but can be\r\n * used in any component. The guard is removed when the component is unmounted.\r\n *\r\n * @param leaveGuard - {@link NavigationGuard}\r\n */\r\nfunction onBeforeRouteLeave(leaveGuard) {\r\n    if ((process.env.NODE_ENV !== 'production') && !getCurrentInstance()) {\r\n        warn$1('onBeforeRouteLeave must be called at the top of a setup function');\r\n        return;\r\n    }\r\n    const activeRecord = inject(matchedRouteKey, {}).value;\r\n    if (!activeRecord) {\r\n        (process.env.NODE_ENV !== 'production') &&\r\n            warn$1('onBeforeRouteLeave must be called at the top of a setup function');\r\n        return;\r\n    }\r\n    registerGuard(activeRecord.leaveGuards, leaveGuard);\r\n}\r\n/**\r\n * Add a navigation guard that triggers whenever the current location is about\r\n * to be updated. Similar to {@link beforeRouteUpdate} but can be used in any\r\n * component. The guard is removed when the component is unmounted.\r\n *\r\n * @param updateGuard - {@link NavigationGuard}\r\n */\r\nfunction onBeforeRouteUpdate(updateGuard) {\r\n    if ((process.env.NODE_ENV !== 'production') && !getCurrentInstance()) {\r\n        warn$1('onBeforeRouteUpdate must be called at the top of a setup function');\r\n        return;\r\n    }\r\n    const activeRecord = inject(matchedRouteKey, {}).value;\r\n    if (!activeRecord) {\r\n        (process.env.NODE_ENV !== 'production') &&\r\n            warn$1('onBeforeRouteUpdate must be called at the top of a setup function');\r\n        return;\r\n    }\r\n    registerGuard(activeRecord.updateGuards, updateGuard);\r\n}\r\nfunction guardToPromiseFn(guard, to, from, record, name) {\r\n    // keep a reference to the enterCallbackArray to prevent pushing callbacks if a new navigation took place\r\n    const enterCallbackArray = record &&\r\n        // name is defined if record is because of the function overload\r\n        (record.enterCallbacks[name] = record.enterCallbacks[name] || []);\r\n    return () => new Promise((resolve, reject) => {\r\n        const next = (valid) => {\r\n            if (valid === false)\r\n                reject(createRouterError(4 /* NAVIGATION_ABORTED */, {\r\n                    from,\r\n                    to,\r\n                }));\r\n            else if (valid instanceof Error) {\r\n                reject(valid);\r\n            }\r\n            else if (isRouteLocation(valid)) {\r\n                reject(createRouterError(2 /* NAVIGATION_GUARD_REDIRECT */, {\r\n                    from: to,\r\n                    to: valid,\r\n                }));\r\n            }\r\n            else {\r\n                if (enterCallbackArray &&\r\n                    // since enterCallbackArray is truthy, both record and name also are\r\n                    record.enterCallbacks[name] === enterCallbackArray &&\r\n                    typeof valid === 'function')\r\n                    enterCallbackArray.push(valid);\r\n                resolve();\r\n            }\r\n        };\r\n        // wrapping with Promise.resolve allows it to work with both async and sync guards\r\n        const guardReturn = guard.call(record && record.instances[name], to, from, (process.env.NODE_ENV !== 'production') ? canOnlyBeCalledOnce(next, to, from) : next);\r\n        let guardCall = Promise.resolve(guardReturn);\r\n        if (guard.length < 3)\r\n            guardCall = guardCall.then(next);\r\n        if ((process.env.NODE_ENV !== 'production') && guard.length > 2) {\r\n            const message = `The \"next\" callback was never called inside of ${guard.name ? '\"' + guard.name + '\"' : ''}:\\n${guard.toString()}\\n. If you are returning a value instead of calling \"next\", make sure to remove the \"next\" parameter from your function.`;\r\n            if (typeof guardReturn === 'object' && 'then' in guardReturn) {\r\n                guardCall = guardCall.then(resolvedValue => {\r\n                    // @ts-ignore: _called is added at canOnlyBeCalledOnce\r\n                    if (!next._called) {\r\n                        warn$1(message);\r\n                        return Promise.reject(new Error('Invalid navigation guard'));\r\n                    }\r\n                    return resolvedValue;\r\n                });\r\n                // TODO: test me!\r\n            }\r\n            else if (guardReturn !== undefined) {\r\n                // @ts-ignore: _called is added at canOnlyBeCalledOnce\r\n                if (!next._called) {\r\n                    warn$1(message);\r\n                    reject(new Error('Invalid navigation guard'));\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        guardCall.catch(err => reject(err));\r\n    });\r\n}\r\nfunction canOnlyBeCalledOnce(next, to, from) {\r\n    let called = 0;\r\n    return function () {\r\n        if (called++ === 1)\r\n            warn$1(`The \"next\" callback was called more than once in one navigation guard when going from \"${from.fullPath}\" to \"${to.fullPath}\". It should be called exactly one time in each navigation guard. This will fail in production.`);\r\n        // @ts-ignore: we put it in the original one because it's easier to check\r\n        next._called = true;\r\n        if (called === 1)\r\n            next.apply(null, arguments);\r\n    };\r\n}\r\nfunction extractComponentsGuards(matched, guardType, to, from) {\r\n    const guards = [];\r\n    for (const record of matched) {\r\n        for (const name in record.components) {\r\n            let rawComponent = record.components[name];\r\n            // warn if user wrote import('/component.vue') instead of () => import('./component.vue')\r\n            if ((process.env.NODE_ENV !== 'production') && 'then' in rawComponent) {\r\n                warn$1(`Component \"${name}\" in record with path \"${record.path}\" is a Promise instead of a function that returns a Promise. Did you write \"import('./MyPage.vue')\" instead of \"() => import('./MyPage.vue')\"? This will break in production if not fixed.`);\r\n                let promise = rawComponent;\r\n                rawComponent = () => promise;\r\n            }\r\n            // skip update and leave guards if the route component is not mounted\r\n            if (guardType !== 'beforeRouteEnter' && !record.instances[name])\r\n                continue;\r\n            if (isRouteComponent(rawComponent)) {\r\n                // __vccOpts is added by vue-class-component and contain the regular options\r\n                let options = rawComponent.__vccOpts || rawComponent;\r\n                const guard = options[guardType];\r\n                guard && guards.push(guardToPromiseFn(guard, to, from, record, name));\r\n            }\r\n            else {\r\n                // start requesting the chunk already\r\n                let componentPromise = rawComponent();\r\n                if ((process.env.NODE_ENV !== 'production') && !('catch' in componentPromise)) {\r\n                    warn$1(`Component \"${name}\" in record with path \"${record.path}\" is a function that does not return a Promise. If you were passing a functional component, make sure to add a \"displayName\" to the component. This will break in production if not fixed.`);\r\n                    componentPromise = Promise.resolve(componentPromise);\r\n                }\r\n                else {\r\n                    // display the error if any\r\n                    componentPromise = componentPromise.catch((process.env.NODE_ENV !== 'production') ? err => err && warn$1(err) : console.error);\r\n                }\r\n                guards.push(() => componentPromise.then(resolved => {\r\n                    if (!resolved)\r\n                        return Promise.reject(new Error(`Couldn't resolve component \"${name}\" at \"${record.path}\"`));\r\n                    const resolvedComponent = isESModule(resolved)\r\n                        ? resolved.default\r\n                        : resolved;\r\n                    // replace the function with the resolved component\r\n                    record.components[name] = resolvedComponent;\r\n                    // @ts-ignore: the options types are not propagated to Component\r\n                    const guard = resolvedComponent[guardType];\r\n                    return guard && guardToPromiseFn(guard, to, from, record, name)();\r\n                }));\r\n            }\r\n        }\r\n    }\r\n    return guards;\r\n}\r\n/**\r\n * Allows differentiating lazy components from functional components and vue-class-component\r\n * @param component\r\n */\r\nfunction isRouteComponent(component) {\r\n    return (typeof component === 'object' ||\r\n        'displayName' in component ||\r\n        'props' in component ||\r\n        '__vccOpts' in component);\r\n}\n\n// TODO: we could allow currentRoute as a prop to expose `isActive` and\r\n// `isExactActive` behavior should go through an RFC\r\nfunction useLink(props) {\r\n    const router = inject(routerKey);\r\n    const currentRoute = inject(routeLocationKey);\r\n    const route = computed(() => router.resolve(unref(props.to)));\r\n    const activeRecordIndex = computed(() => {\r\n        let { matched } = route.value;\r\n        let { length } = matched;\r\n        const routeMatched = matched[length - 1];\r\n        let currentMatched = currentRoute.matched;\r\n        if (!routeMatched || !currentMatched.length)\r\n            return -1;\r\n        let index = currentMatched.findIndex(isSameRouteRecord.bind(null, routeMatched));\r\n        if (index > -1)\r\n            return index;\r\n        // possible parent record\r\n        let parentRecordPath = getOriginalPath(matched[length - 2]);\r\n        return (\r\n        // we are dealing with nested routes\r\n        length > 1 &&\r\n            // if the parent and matched route have the same path, this link is\r\n            // referring to the empty child. Or we currently are on a different\r\n            // child of the same parent\r\n            getOriginalPath(routeMatched) === parentRecordPath &&\r\n            // avoid comparing the child with its parent\r\n            currentMatched[currentMatched.length - 1].path !== parentRecordPath\r\n            ? currentMatched.findIndex(isSameRouteRecord.bind(null, matched[length - 2]))\r\n            : index);\r\n    });\r\n    const isActive = computed(() => activeRecordIndex.value > -1 &&\r\n        includesParams(currentRoute.params, route.value.params));\r\n    const isExactActive = computed(() => activeRecordIndex.value > -1 &&\r\n        activeRecordIndex.value === currentRoute.matched.length - 1 &&\r\n        isSameRouteLocationParams(currentRoute.params, route.value.params));\r\n    function navigate(e = {}) {\r\n        if (guardEvent(e))\r\n            return router[unref(props.replace) ? 'replace' : 'push'](unref(props.to));\r\n        return Promise.resolve();\r\n    }\r\n    return {\r\n        route,\r\n        href: computed(() => route.value.href),\r\n        isActive,\r\n        isExactActive,\r\n        navigate,\r\n    };\r\n}\r\nconst RouterLinkImpl = defineComponent({\r\n    name: 'RouterLink',\r\n    props: {\r\n        to: {\r\n            type: [String, Object],\r\n            required: true,\r\n        },\r\n        activeClass: String,\r\n        // inactiveClass: String,\r\n        exactActiveClass: String,\r\n        custom: Boolean,\r\n        ariaCurrentValue: {\r\n            type: String,\r\n            default: 'page',\r\n        },\r\n    },\r\n    setup(props, { slots, attrs }) {\r\n        const link = reactive(useLink(props));\r\n        const { options } = inject(routerKey);\r\n        const elClass = computed(() => ({\r\n            [getLinkClass(props.activeClass, options.linkActiveClass, 'router-link-active')]: link.isActive,\r\n            // [getLinkClass(\r\n            //   props.inactiveClass,\r\n            //   options.linkInactiveClass,\r\n            //   'router-link-inactive'\r\n            // )]: !link.isExactActive,\r\n            [getLinkClass(props.exactActiveClass, options.linkExactActiveClass, 'router-link-exact-active')]: link.isExactActive,\r\n        }));\r\n        return () => {\r\n            const children = slots.default && slots.default(link);\r\n            return props.custom\r\n                ? children\r\n                : h('a', assign({\r\n                    'aria-current': link.isExactActive\r\n                        ? props.ariaCurrentValue\r\n                        : null,\r\n                    onClick: link.navigate,\r\n                    href: link.href,\r\n                }, attrs, {\r\n                    class: elClass.value,\r\n                }), children);\r\n        };\r\n    },\r\n});\r\n// export the public type for h/tsx inference\r\n// also to avoid inline import() in generated d.ts files\r\n/**\r\n * Component to render a link that triggers a navigation on click.\r\n */\r\nconst RouterLink = RouterLinkImpl;\r\nfunction guardEvent(e) {\r\n    // don't redirect with control keys\r\n    if (e.metaKey || e.altKey || e.ctrlKey || e.shiftKey)\r\n        return;\r\n    // don't redirect when preventDefault called\r\n    if (e.defaultPrevented)\r\n        return;\r\n    // don't redirect on right click\r\n    if (e.button !== undefined && e.button !== 0)\r\n        return;\r\n    // don't redirect if `target=\"_blank\"`\r\n    // @ts-ignore getAttribute does exist\r\n    if (e.currentTarget && e.currentTarget.getAttribute) {\r\n        // @ts-ignore getAttribute exists\r\n        const target = e.currentTarget.getAttribute('target');\r\n        if (/\\b_blank\\b/i.test(target))\r\n            return;\r\n    }\r\n    // this may be a Weex event which doesn't have this method\r\n    if (e.preventDefault)\r\n        e.preventDefault();\r\n    return true;\r\n}\r\nfunction includesParams(outer, inner) {\r\n    for (let key in inner) {\r\n        let innerValue = inner[key];\r\n        let outerValue = outer[key];\r\n        if (typeof innerValue === 'string') {\r\n            if (innerValue !== outerValue)\r\n                return false;\r\n        }\r\n        else {\r\n            if (!Array.isArray(outerValue) ||\r\n                outerValue.length !== innerValue.length ||\r\n                innerValue.some((value, i) => value !== outerValue[i]))\r\n                return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Get the original path value of a record by following its aliasOf\r\n * @param record\r\n */\r\nfunction getOriginalPath(record) {\r\n    return record ? (record.aliasOf ? record.aliasOf.path : record.path) : '';\r\n}\r\n/**\r\n * Utility class to get the active class based on defaults.\r\n * @param propClass\r\n * @param globalClass\r\n * @param defaultClass\r\n */\r\nlet getLinkClass = (propClass, globalClass, defaultClass) => propClass != null\r\n    ? propClass\r\n    : globalClass != null\r\n        ? globalClass\r\n        : defaultClass;\n\nconst RouterViewImpl = defineComponent({\r\n    name: 'RouterView',\r\n    props: {\r\n        name: {\r\n            type: String,\r\n            default: 'default',\r\n        },\r\n        route: Object,\r\n    },\r\n    setup(props, { attrs, slots }) {\r\n        (process.env.NODE_ENV !== 'production') && warnDeprecatedUsage();\r\n        const injectedRoute = inject(routeLocationKey);\r\n        const depth = inject(viewDepthKey, 0);\r\n        const matchedRouteRef = computed(() => (props.route || injectedRoute).matched[depth]);\r\n        provide(viewDepthKey, depth + 1);\r\n        provide(matchedRouteKey, matchedRouteRef);\r\n        const viewRef = ref();\r\n        // watch at the same time the component instance, the route record we are\r\n        // rendering, and the name\r\n        watch(() => [viewRef.value, matchedRouteRef.value, props.name], ([instance, to, name], [oldInstance, from, oldName]) => {\r\n            // copy reused instances\r\n            if (to) {\r\n                // this will update the instance for new instances as well as reused\r\n                // instances when navigating to a new route\r\n                to.instances[name] = instance;\r\n                // the component instance is reused for a different route or name so\r\n                // we copy any saved update or leave guards\r\n                if (from && instance === oldInstance) {\r\n                    to.leaveGuards = from.leaveGuards;\r\n                    to.updateGuards = from.updateGuards;\r\n                }\r\n            }\r\n            // trigger beforeRouteEnter next callbacks\r\n            if (instance &&\r\n                to &&\r\n                // if there is no instance but to and from are the same this might be\r\n                // the first visit\r\n                (!from || !isSameRouteRecord(to, from) || !oldInstance)) {\r\n                (to.enterCallbacks[name] || []).forEach(callback => callback(instance));\r\n            }\r\n        }, { flush: 'post' });\r\n        return () => {\r\n            const route = props.route || injectedRoute;\r\n            const matchedRoute = matchedRouteRef.value;\r\n            const ViewComponent = matchedRoute && matchedRoute.components[props.name];\r\n            // we need the value at the time we render because when we unmount, we\r\n            // navigated to a different location so the value is different\r\n            const currentName = props.name;\r\n            if (!ViewComponent) {\r\n                return slots.default\r\n                    ? slots.default({ Component: ViewComponent, route })\r\n                    : null;\r\n            }\r\n            // props from route configuration\r\n            const routePropsOption = matchedRoute.props[props.name];\r\n            const routeProps = routePropsOption\r\n                ? routePropsOption === true\r\n                    ? route.params\r\n                    : typeof routePropsOption === 'function'\r\n                        ? routePropsOption(route)\r\n                        : routePropsOption\r\n                : null;\r\n            const onVnodeUnmounted = vnode => {\r\n                // remove the instance reference to prevent leak\r\n                if (vnode.component.isUnmounted) {\r\n                    matchedRoute.instances[currentName] = null;\r\n                }\r\n            };\r\n            const component = h(ViewComponent, assign({}, routeProps, attrs, {\r\n                onVnodeUnmounted,\r\n                ref: viewRef,\r\n            }));\r\n            return (\r\n            // pass the vnode to the slot as a prop.\r\n            // h and <component :is=\"...\"> both accept vnodes\r\n            slots.default\r\n                ? slots.default({ Component: component, route })\r\n                : component);\r\n        };\r\n    },\r\n});\r\n// export the public type for h/tsx inference\r\n// also to avoid inline import() in generated d.ts files\r\n/**\r\n * Component to display the current route the user is at.\r\n */\r\nconst RouterView = RouterViewImpl;\r\n// warn against deprecated usage with <transition> & <keep-alive>\r\n// due to functional component being no longer eager in Vue 3\r\nfunction warnDeprecatedUsage() {\r\n    const instance = getCurrentInstance();\r\n    const parentName = instance.parent && instance.parent.type.name;\r\n    if (parentName &&\r\n        (parentName === 'KeepAlive' || parentName.includes('Transition'))) {\r\n        const comp = parentName === 'KeepAlive' ? 'keep-alive' : 'transition';\r\n        warn(`<router-view> can no longer be used directly inside <transition> or <keep-alive>.\\n` +\r\n            `Use slot props instead:\\n\\n` +\r\n            `<router-view v-slot=\"{ Component }\">\\n` +\r\n            `  <${comp}>\\n` +\r\n            `    <component :is=\"Component\" />\\n` +\r\n            `  </${comp}>\\n` +\r\n            `</router-view>`);\r\n    }\r\n}\n\n/**\r\n * Creates a Router instance that can be used by a Vue app.\r\n *\r\n * @param options - {@link RouterOptions}\r\n */\r\nfunction createRouter(options) {\r\n    const matcher = createRouterMatcher(options.routes, options);\r\n    let parseQuery$1 = options.parseQuery || parseQuery;\r\n    let stringifyQuery$1 = options.stringifyQuery || stringifyQuery;\r\n    let { scrollBehavior } = options;\r\n    let routerHistory = options.history;\r\n    const beforeGuards = useCallbacks();\r\n    const beforeResolveGuards = useCallbacks();\r\n    const afterGuards = useCallbacks();\r\n    const currentRoute = shallowRef(START_LOCATION_NORMALIZED);\r\n    let pendingLocation = START_LOCATION_NORMALIZED;\r\n    // leave the scrollRestoration if no scrollBehavior is provided\r\n    if (isBrowser && scrollBehavior && 'scrollRestoration' in history) {\r\n        history.scrollRestoration = 'manual';\r\n    }\r\n    const normalizeParams = applyToParams.bind(null, paramValue => '' + paramValue);\r\n    const encodeParams = applyToParams.bind(null, encodeParam);\r\n    const decodeParams = applyToParams.bind(null, decode);\r\n    function addRoute(parentOrRoute, route) {\r\n        let parent;\r\n        let record;\r\n        if (isRouteName(parentOrRoute)) {\r\n            parent = matcher.getRecordMatcher(parentOrRoute);\r\n            record = route;\r\n        }\r\n        else {\r\n            record = parentOrRoute;\r\n        }\r\n        return matcher.addRoute(record, parent);\r\n    }\r\n    function removeRoute(name) {\r\n        let recordMatcher = matcher.getRecordMatcher(name);\r\n        if (recordMatcher) {\r\n            matcher.removeRoute(recordMatcher);\r\n        }\r\n        else if ((process.env.NODE_ENV !== 'production')) {\r\n            warn(`Cannot remove non-existent route \"${String(name)}\"`);\r\n        }\r\n    }\r\n    function getRoutes() {\r\n        return matcher.getRoutes().map(routeMatcher => routeMatcher.record);\r\n    }\r\n    function hasRoute(name) {\r\n        return !!matcher.getRecordMatcher(name);\r\n    }\r\n    function resolve(rawLocation, currentLocation) {\r\n        // const objectLocation = routerLocationAsObject(rawLocation)\r\n        // we create a copy to modify it later\r\n        currentLocation = assign({}, currentLocation || currentRoute.value);\r\n        if (typeof rawLocation === 'string') {\r\n            let locationNormalized = parseURL(parseQuery$1, rawLocation, currentLocation.path);\r\n            let matchedRoute = matcher.resolve({ path: locationNormalized.path }, currentLocation);\r\n            let href = routerHistory.createHref(locationNormalized.fullPath);\r\n            if ((process.env.NODE_ENV !== 'production')) {\r\n                if (href.startsWith('//'))\r\n                    warn(`Location \"${rawLocation}\" resolved to \"${href}\". A resolved location cannot start with multiple slashes.`);\r\n                else if (!matchedRoute.matched.length) {\r\n                    warn(`No match found for location with path \"${rawLocation}\"`);\r\n                }\r\n            }\r\n            // locationNormalized is always a new object\r\n            return assign(locationNormalized, matchedRoute, {\r\n                params: decodeParams(matchedRoute.params),\r\n                hash: decode(locationNormalized.hash),\r\n                redirectedFrom: undefined,\r\n                href,\r\n            });\r\n        }\r\n        let matcherLocation;\r\n        // path could be relative in object as well\r\n        if ('path' in rawLocation) {\r\n            if ((process.env.NODE_ENV !== 'production') &&\r\n                'params' in rawLocation &&\r\n                !('name' in rawLocation) &&\r\n                Object.keys(rawLocation.params).length) {\r\n                warn(`Path \"${rawLocation.path}\" was passed with params but they will be ignored. Use a named route alongside params instead.`);\r\n            }\r\n            matcherLocation = assign({}, rawLocation, {\r\n                path: parseURL(parseQuery$1, rawLocation.path, currentLocation.path).path,\r\n            });\r\n        }\r\n        else {\r\n            // pass encoded values to the matcher so it can produce encoded path and fullPath\r\n            matcherLocation = assign({}, rawLocation, {\r\n                params: encodeParams(rawLocation.params),\r\n            });\r\n            // current location params are decoded, we need to encode them in case the\r\n            // matcher merges the params\r\n            currentLocation.params = encodeParams(currentLocation.params);\r\n        }\r\n        let matchedRoute = matcher.resolve(matcherLocation, currentLocation);\r\n        const hash = rawLocation.hash || '';\r\n        if ((process.env.NODE_ENV !== 'production') && hash && !hash.startsWith('#')) {\r\n            warn(`A \\`hash\\` should always start with the character \"#\". Replace \"${hash}\" with \"#${hash}\".`);\r\n        }\r\n        // decoding them) the matcher might have merged current location params so\r\n        // we need to run the decoding again\r\n        matchedRoute.params = normalizeParams(decodeParams(matchedRoute.params));\r\n        const fullPath = stringifyURL(stringifyQuery$1, assign({}, rawLocation, {\r\n            hash: encodeHash(hash),\r\n            path: matchedRoute.path,\r\n        }));\r\n        let href = routerHistory.createHref(fullPath);\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            if (href.startsWith('//')) {\r\n                warn(`Location \"${rawLocation}\" resolved to \"${href}\". A resolved location cannot start with multiple slashes.`);\r\n            }\r\n            else if (!matchedRoute.matched.length) {\r\n                warn(`No match found for location with path \"${'path' in rawLocation ? rawLocation.path : rawLocation}\"`);\r\n            }\r\n        }\r\n        return assign({\r\n            fullPath,\r\n            // keep the hash encoded so fullPath is effectively path + encodedQuery +\r\n            // hash\r\n            hash,\r\n            query: \r\n            // if the user is using a custom query lib like qs, we might have\r\n            // nested objects, so we keep the query as is, meaning it can contain\r\n            // numbers at `$route.query`, but at the point, the user will have to\r\n            // use their own type anyway.\r\n            // https://github.com/vuejs/vue-router-next/issues/328#issuecomment-649481567\r\n            stringifyQuery$1 === stringifyQuery\r\n                ? normalizeQuery(rawLocation.query)\r\n                : rawLocation.query,\r\n        }, matchedRoute, {\r\n            redirectedFrom: undefined,\r\n            href,\r\n        });\r\n    }\r\n    function locationAsObject(to) {\r\n        return typeof to === 'string' ? { path: to } : assign({}, to);\r\n    }\r\n    function checkCanceledNavigation(to, from) {\r\n        if (pendingLocation !== to) {\r\n            return createRouterError(8 /* NAVIGATION_CANCELLED */, {\r\n                from,\r\n                to,\r\n            });\r\n        }\r\n    }\r\n    function push(to) {\r\n        return pushWithRedirect(to);\r\n    }\r\n    function replace(to) {\r\n        return push(assign(locationAsObject(to), { replace: true }));\r\n    }\r\n    function pushWithRedirect(to, redirectedFrom) {\r\n        const targetLocation = (pendingLocation = resolve(to));\r\n        const from = currentRoute.value;\r\n        const data = to.state;\r\n        const force = to.force;\r\n        // to could be a string where `replace` is a function\r\n        const replace = to.replace === true;\r\n        const lastMatched = targetLocation.matched[targetLocation.matched.length - 1];\r\n        if (lastMatched && lastMatched.redirect) {\r\n            const { redirect } = lastMatched;\r\n            // transform it into an object to pass the original RouteLocaleOptions\r\n            let newTargetLocation = locationAsObject(typeof redirect === 'function' ? redirect(targetLocation) : redirect);\r\n            if ((process.env.NODE_ENV !== 'production') &&\r\n                !('path' in newTargetLocation) &&\r\n                !('name' in newTargetLocation)) {\r\n                warn(`Invalid redirect found:\\n${JSON.stringify(newTargetLocation, null, 2)}\\n when navigating to \"${targetLocation.fullPath}\". A redirect must contain a name or path. This will break in production.`);\r\n                return Promise.reject(new Error('Invalid redirect'));\r\n            }\r\n            return pushWithRedirect(assign({\r\n                query: targetLocation.query,\r\n                hash: targetLocation.hash,\r\n                params: targetLocation.params,\r\n            }, newTargetLocation, {\r\n                state: data,\r\n                force,\r\n                replace,\r\n            }), \r\n            // keep original redirectedFrom if it exists\r\n            redirectedFrom || targetLocation);\r\n        }\r\n        // if it was a redirect we already called `pushWithRedirect` above\r\n        const toLocation = targetLocation;\r\n        toLocation.redirectedFrom = redirectedFrom;\r\n        let failure;\r\n        if (!force && isSameRouteLocation(stringifyQuery$1, from, targetLocation)) {\r\n            failure = createRouterError(16 /* NAVIGATION_DUPLICATED */, { to: toLocation, from });\r\n            // trigger scroll to allow scrolling to the same anchor\r\n            handleScroll(from, from, \r\n            // this is a push, the only way for it to be triggered from a\r\n            // history.listen is with a redirect, which makes it become a pus\r\n            true, \r\n            // This cannot be the first navigation because the initial location\r\n            // cannot be manually navigated to\r\n            false);\r\n        }\r\n        return (failure ? Promise.resolve(failure) : navigate(toLocation, from))\r\n            .catch((error) => {\r\n            if (isNavigationFailure(error, 4 /* NAVIGATION_ABORTED */ |\r\n                8 /* NAVIGATION_CANCELLED */ |\r\n                2 /* NAVIGATION_GUARD_REDIRECT */)) {\r\n                return error;\r\n            }\r\n            // unknown error, rejects\r\n            return triggerError(error);\r\n        })\r\n            .then((failure) => {\r\n            if (failure) {\r\n                if (isNavigationFailure(failure, 2 /* NAVIGATION_GUARD_REDIRECT */)) {\r\n                    if ((process.env.NODE_ENV !== 'production') &&\r\n                        // we are redirecting to the same location we were already at\r\n                        isSameRouteLocation(stringifyQuery$1, resolve(failure.to), toLocation) &&\r\n                        // and we have done it a couple of times\r\n                        redirectedFrom &&\r\n                        // @ts-ignore\r\n                        (redirectedFrom._count = redirectedFrom._count\r\n                            ? // @ts-ignore\r\n                                redirectedFrom._count + 1\r\n                            : 1) > 10) {\r\n                        warn(`Detected an infinite redirection in a navigation guard when going from \"${from.fullPath}\" to \"${toLocation.fullPath}\". Aborting to avoid a Stack Overflow. This will break in production if not fixed.`);\r\n                        return Promise.reject(new Error('Infinite redirect in navigation guard'));\r\n                    }\r\n                    return pushWithRedirect(\r\n                    // keep options\r\n                    assign(locationAsObject(failure.to), {\r\n                        state: data,\r\n                        force,\r\n                        replace,\r\n                    }), \r\n                    // preserve the original redirectedFrom if any\r\n                    redirectedFrom || toLocation);\r\n                }\r\n            }\r\n            else {\r\n                // if we fail we don't finalize the navigation\r\n                failure = finalizeNavigation(toLocation, from, true, replace, data);\r\n            }\r\n            triggerAfterEach(toLocation, from, failure);\r\n            return failure;\r\n        });\r\n    }\r\n    /**\r\n     * Helper to reject and skip all navigation guards if a new navigation happened\r\n     * @param to\r\n     * @param from\r\n     */\r\n    function checkCanceledNavigationAndReject(to, from) {\r\n        const error = checkCanceledNavigation(to, from);\r\n        return error ? Promise.reject(error) : Promise.resolve();\r\n    }\r\n    // TODO: refactor the whole before guards by internally using router.beforeEach\r\n    function navigate(to, from) {\r\n        let guards;\r\n        const [leavingRecords, updatingRecords, enteringRecords,] = extractChangingRecords(to, from);\r\n        // all components here have been resolved once because we are leaving\r\n        guards = extractComponentsGuards(leavingRecords.reverse(), 'beforeRouteLeave', to, from);\r\n        // leavingRecords is already reversed\r\n        for (const record of leavingRecords) {\r\n            for (const guard of record.leaveGuards) {\r\n                guards.push(guardToPromiseFn(guard, to, from));\r\n            }\r\n        }\r\n        const canceledNavigationCheck = checkCanceledNavigationAndReject.bind(null, to, from);\r\n        guards.push(canceledNavigationCheck);\r\n        // run the queue of per route beforeRouteLeave guards\r\n        return (runGuardQueue(guards)\r\n            .then(() => {\r\n            // check global guards beforeEach\r\n            guards = [];\r\n            for (const guard of beforeGuards.list()) {\r\n                guards.push(guardToPromiseFn(guard, to, from));\r\n            }\r\n            guards.push(canceledNavigationCheck);\r\n            return runGuardQueue(guards);\r\n        })\r\n            .then(() => {\r\n            // check in components beforeRouteUpdate\r\n            guards = extractComponentsGuards(updatingRecords, 'beforeRouteUpdate', to, from);\r\n            for (const record of updatingRecords) {\r\n                for (const guard of record.updateGuards) {\r\n                    guards.push(guardToPromiseFn(guard, to, from));\r\n                }\r\n            }\r\n            guards.push(canceledNavigationCheck);\r\n            // run the queue of per route beforeEnter guards\r\n            return runGuardQueue(guards);\r\n        })\r\n            .then(() => {\r\n            // check the route beforeEnter\r\n            guards = [];\r\n            for (const record of to.matched) {\r\n                // do not trigger beforeEnter on reused views\r\n                if (record.beforeEnter && from.matched.indexOf(record) < 0) {\r\n                    if (Array.isArray(record.beforeEnter)) {\r\n                        for (const beforeEnter of record.beforeEnter)\r\n                            guards.push(guardToPromiseFn(beforeEnter, to, from));\r\n                    }\r\n                    else {\r\n                        guards.push(guardToPromiseFn(record.beforeEnter, to, from));\r\n                    }\r\n                }\r\n            }\r\n            guards.push(canceledNavigationCheck);\r\n            // run the queue of per route beforeEnter guards\r\n            return runGuardQueue(guards);\r\n        })\r\n            .then(() => {\r\n            // NOTE: at this point to.matched is normalized and does not contain any () => Promise<Component>\r\n            // clear existing enterCallbacks, these are added by extractComponentsGuards\r\n            to.matched.forEach(record => (record.enterCallbacks = {}));\r\n            // check in-component beforeRouteEnter\r\n            guards = extractComponentsGuards(enteringRecords, 'beforeRouteEnter', to, from);\r\n            guards.push(canceledNavigationCheck);\r\n            // run the queue of per route beforeEnter guards\r\n            return runGuardQueue(guards);\r\n        })\r\n            .then(() => {\r\n            // check global guards beforeResolve\r\n            guards = [];\r\n            for (const guard of beforeResolveGuards.list()) {\r\n                guards.push(guardToPromiseFn(guard, to, from));\r\n            }\r\n            guards.push(canceledNavigationCheck);\r\n            return runGuardQueue(guards);\r\n        })\r\n            // catch any navigation canceled\r\n            .catch(err => isNavigationFailure(err, 8 /* NAVIGATION_CANCELLED */)\r\n            ? err\r\n            : Promise.reject(err)));\r\n    }\r\n    function triggerAfterEach(to, from, failure) {\r\n        // navigation is confirmed, call afterGuards\r\n        // TODO: wrap with error handlers\r\n        for (const guard of afterGuards.list())\r\n            guard(to, from, failure);\r\n    }\r\n    /**\r\n     * - Cleans up any navigation guards\r\n     * - Changes the url if necessary\r\n     * - Calls the scrollBehavior\r\n     */\r\n    function finalizeNavigation(toLocation, from, isPush, replace, data) {\r\n        // a more recent navigation took place\r\n        const error = checkCanceledNavigation(toLocation, from);\r\n        if (error)\r\n            return error;\r\n        // only consider as push if it's not the first navigation\r\n        const isFirstNavigation = from === START_LOCATION_NORMALIZED;\r\n        const state = !isBrowser ? {} : history.state;\r\n        // change URL only if the user did a push/replace and if it's not the initial navigation because\r\n        // it's just reflecting the url\r\n        if (isPush) {\r\n            // on the initial navigation, we want to reuse the scroll position from\r\n            // history state if it exists\r\n            if (replace || isFirstNavigation)\r\n                routerHistory.replace(toLocation.fullPath, assign({\r\n                    scroll: isFirstNavigation && state && state.scroll,\r\n                }, data));\r\n            else\r\n                routerHistory.push(toLocation.fullPath, data);\r\n        }\r\n        // accept current navigation\r\n        currentRoute.value = toLocation;\r\n        handleScroll(toLocation, from, isPush, isFirstNavigation);\r\n        markAsReady();\r\n    }\r\n    let removeHistoryListener;\r\n    // attach listener to history to trigger navigations\r\n    function setupListeners() {\r\n        removeHistoryListener = routerHistory.listen((to, _from, info) => {\r\n            // cannot be a redirect route because it was in history\r\n            const toLocation = resolve(to);\r\n            pendingLocation = toLocation;\r\n            const from = currentRoute.value;\r\n            // TODO: should be moved to web history?\r\n            if (isBrowser) {\r\n                saveScrollPosition(getScrollKey(from.fullPath, info.delta), computeScrollPosition());\r\n            }\r\n            navigate(toLocation, from)\r\n                .catch((error) => {\r\n                if (isNavigationFailure(error, 4 /* NAVIGATION_ABORTED */ | 8 /* NAVIGATION_CANCELLED */)) {\r\n                    return error;\r\n                }\r\n                if (isNavigationFailure(error, 2 /* NAVIGATION_GUARD_REDIRECT */)) {\r\n                    // do not restore history on unknown direction\r\n                    if (info.delta)\r\n                        routerHistory.go(-info.delta, false);\r\n                    // the error is already handled by router.push we just want to avoid\r\n                    // logging the error\r\n                    pushWithRedirect(error.to, toLocation\r\n                    // avoid an uncaught rejection\r\n                    ).catch(noop);\r\n                    // avoid the then branch\r\n                    return Promise.reject();\r\n                }\r\n                // do not restore history on unknown direction\r\n                if (info.delta)\r\n                    routerHistory.go(-info.delta, false);\r\n                // unrecognized error, transfer to the global handler\r\n                return triggerError(error);\r\n            })\r\n                .then((failure) => {\r\n                failure =\r\n                    failure ||\r\n                        finalizeNavigation(\r\n                        // after navigation, all matched components are resolved\r\n                        toLocation, from, false);\r\n                // revert the navigation\r\n                if (failure && info.delta)\r\n                    routerHistory.go(-info.delta, false);\r\n                triggerAfterEach(toLocation, from, failure);\r\n            })\r\n                .catch(noop);\r\n        });\r\n    }\r\n    // Initialization and Errors\r\n    let readyHandlers = useCallbacks();\r\n    let errorHandlers = useCallbacks();\r\n    let ready;\r\n    /**\r\n     * Trigger errorHandlers added via onError and throws the error as well\r\n     * @param error - error to throw\r\n     * @returns the error as a rejected promise\r\n     */\r\n    function triggerError(error) {\r\n        markAsReady(error);\r\n        errorHandlers.list().forEach(handler => handler(error));\r\n        return Promise.reject(error);\r\n    }\r\n    function isReady() {\r\n        if (ready && currentRoute.value !== START_LOCATION_NORMALIZED)\r\n            return Promise.resolve();\r\n        return new Promise((resolve, reject) => {\r\n            readyHandlers.add([resolve, reject]);\r\n        });\r\n    }\r\n    /**\r\n     * Mark the router as ready, resolving the promised returned by isReady(). Can\r\n     * only be called once, otherwise does nothing.\r\n     * @param err - optional error\r\n     */\r\n    function markAsReady(err) {\r\n        if (ready)\r\n            return;\r\n        ready = true;\r\n        setupListeners();\r\n        readyHandlers\r\n            .list()\r\n            .forEach(([resolve, reject]) => (err ? reject(err) : resolve()));\r\n        readyHandlers.reset();\r\n    }\r\n    // Scroll behavior\r\n    function handleScroll(to, from, isPush, isFirstNavigation) {\r\n        if (!isBrowser || !scrollBehavior)\r\n            return Promise.resolve();\r\n        let scrollPosition = (!isPush && getSavedScrollPosition(getScrollKey(to.fullPath, 0))) ||\r\n            ((isFirstNavigation || !isPush) &&\r\n                history.state &&\r\n                history.state.scroll) ||\r\n            null;\r\n        return nextTick()\r\n            .then(() => scrollBehavior(to, from, scrollPosition))\r\n            .then(position => position && scrollToPosition(position))\r\n            .catch(triggerError);\r\n    }\r\n    const go = (delta) => routerHistory.go(delta);\r\n    let started;\r\n    const installedApps = new Set();\r\n    const router = {\r\n        currentRoute,\r\n        addRoute,\r\n        removeRoute,\r\n        hasRoute,\r\n        getRoutes,\r\n        resolve,\r\n        options,\r\n        push,\r\n        replace,\r\n        go,\r\n        back: () => go(-1),\r\n        forward: () => go(1),\r\n        beforeEach: beforeGuards.add,\r\n        beforeResolve: beforeResolveGuards.add,\r\n        afterEach: afterGuards.add,\r\n        onError: errorHandlers.add,\r\n        isReady,\r\n        install(app) {\r\n            const router = this;\r\n            app.component('RouterLink', RouterLink);\r\n            app.component('RouterView', RouterView);\r\n            app.config.globalProperties.$router = router;\r\n            Object.defineProperty(app.config.globalProperties, '$route', {\r\n                get: () => unref(currentRoute),\r\n            });\r\n            // this initial navigation is only necessary on client, on server it doesn't\r\n            // make sense because it will create an extra unnecessary navigation and could\r\n            // lead to problems\r\n            if (isBrowser &&\r\n                // used for the initial navigation client side to avoid pushing\r\n                // multiple times when the router is used in multiple apps\r\n                !started &&\r\n                currentRoute.value === START_LOCATION_NORMALIZED) {\r\n                // see above\r\n                started = true;\r\n                push(routerHistory.location).catch(err => {\r\n                    if ((process.env.NODE_ENV !== 'production'))\r\n                        warn('Unexpected error when starting the router:', err);\r\n                });\r\n            }\r\n            const reactiveRoute = {};\r\n            for (let key in START_LOCATION_NORMALIZED) {\r\n                // @ts-ignore: the key matches\r\n                reactiveRoute[key] = computed(() => currentRoute.value[key]);\r\n            }\r\n            app.provide(routerKey, router);\r\n            app.provide(routeLocationKey, reactive(reactiveRoute));\r\n            let unmountApp = app.unmount;\r\n            installedApps.add(app);\r\n            app.unmount = function () {\r\n                installedApps.delete(app);\r\n                if (installedApps.size < 1) {\r\n                    removeHistoryListener();\r\n                    currentRoute.value = START_LOCATION_NORMALIZED;\r\n                    started = false;\r\n                    ready = false;\r\n                }\r\n                unmountApp.call(this, arguments);\r\n            };\r\n        },\r\n    };\r\n    return router;\r\n}\r\nfunction runGuardQueue(guards) {\r\n    return guards.reduce((promise, guard) => promise.then(() => guard()), Promise.resolve());\r\n}\r\nfunction extractChangingRecords(to, from) {\r\n    const leavingRecords = [];\r\n    const updatingRecords = [];\r\n    const enteringRecords = [];\r\n    const len = Math.max(from.matched.length, to.matched.length);\r\n    for (let i = 0; i < len; i++) {\r\n        const recordFrom = from.matched[i];\r\n        if (recordFrom) {\r\n            if (to.matched.indexOf(recordFrom) < 0)\r\n                leavingRecords.push(recordFrom);\r\n            else\r\n                updatingRecords.push(recordFrom);\r\n        }\r\n        const recordTo = to.matched[i];\r\n        if (recordTo) {\r\n            // the type doesn't matter because we are comparing per reference\r\n            if (from.matched.indexOf(recordTo) < 0)\r\n                enteringRecords.push(recordTo);\r\n        }\r\n    }\r\n    return [leavingRecords, updatingRecords, enteringRecords];\r\n}\n\n/**\r\n * Returns the router instance. Equivalent to using `$router` inside\r\n * templates.\r\n */\r\nfunction useRouter() {\r\n    return inject(routerKey);\r\n}\r\n/**\r\n * Returns the current route location. Equivalent to using `$route` inside\r\n * templates.\r\n */\r\nfunction useRoute() {\r\n    return inject(routeLocationKey);\r\n}\n\nexport { NavigationFailureType, RouterLink, RouterView, START_LOCATION_NORMALIZED as START_LOCATION, createMemoryHistory, createRouter, createRouterMatcher, createWebHashHistory, createWebHistory, isNavigationFailure, onBeforeRouteLeave, onBeforeRouteUpdate, parseQuery, stringifyQuery, useLink, useRoute, useRouter };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}